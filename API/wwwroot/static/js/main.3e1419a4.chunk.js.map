{"version":3,"sources":["features/profiles/profile.module.css","app/models/paginations.ts","app/api/agent.ts","app/models/activity.ts","app/models/profile.ts","app/stores/activityStore.ts","app/stores/userStore.ts","app/stores/profileStore.ts","app/stores/store.ts","app/stores/commonStroe.ts","app/stores/modalStore.ts","app/stores/CommentStore.ts","app/layout/NavBar.tsx","features/profiles/FollowButton.tsx","features/profiles/ProfileCard.tsx","features/activities/dachboard/ActivityListItemAttendee.tsx","features/activities/dachboard/ActivityListItem.tsx","features/activities/dachboard/ActiviytList.tsx","features/activities/dachboard/ActivityFilters.tsx","features/activities/dachboard/ActivityListItemPlaceholder.tsx","features/activities/dachboard/ActivityDashboard.tsx","app/common/form/MyTextInput.tsx","features/users/LoginForm.tsx","features/errors/ValidationErrors.tsx","features/users/RegisterForm.tsx","features/home/HomePage.tsx","app/layout/LoadingComponent.tsx","app/common/form/MyTextArea.tsx","app/common/form/MySelectInput.tsx","app/common/options/categoryOptions.ts","app/common/form/MyDateInput.tsx","features/activities/form/ActivityForm.tsx","features/activities/details/ActivityDetailedChat.tsx","features/activities/details/ActivityDetailedHeader.tsx","features/activities/details/ActivityDetailedInfo.tsx","features/activities/details/ActivityDetailedSidbar.tsx","features/activities/details/ActivityDetails.tsx","features/errors/TestError.tsx","features/errors/NotFound.tsx","features/errors/ServerErrors.tsx","app/common/modals/ModalContainer.tsx","app/common/imageUploade/PhotoWidgetCropper.tsx","app/common/imageUploade/PhotoWidgetDropzone.tsx","app/common/imageUploade/PhotoUploadWidget.tsx","features/profiles/ProfilePhotos.tsx","features/profiles/ProfileFollowings.tsx","features/profiles/ProfileActivities.tsx","features/profiles/ProfileEditForm.tsx","features/profiles/ProfileAbout.tsx","features/profiles/ProfileContent.tsx","features/profiles/ProfileHeader.tsx","features/profiles/ProfilePage.tsx","app/layout/PrivateRoute.tsx","app/layout/App.tsx","reportWebVitals.ts","app/layout/ScrollToTop.tsx","index.tsx"],"names":["module","exports","PaginatedResult","data","pagination","this","PagingParams","pageNumber","pageSize","axios","defaults","baseURL","process","interceptors","request","use","config","token","store","commonStore","headers","Authorization","response","a","JSON","parse","error","status","method","errors","hasOwnProperty","history","push","modalStateErrors","key","flat","toast","startsWith","userStore","logout","setServerError","Promise","reject","responseBody","requests","url","get","then","body","post","put","delete","agent","Activities","list","params","details","id","create","activity","update","attend","Account","current","login","user","register","fbLogin","accessToken","refreshToken","Profiles","username","uploadPhoto","file","formData","FormData","append","setMainPhoto","deletePhoto","updateProfile","profile","updateFollowing","listFollowings","predicate","listActivities","Activity","init","Object","assign","ActivityFormValues","undefined","title","category","description","date","city","venue","Profile","displayName","image","ActivityStore","activityRegistry","Map","selectedActivity","editMode","loading","loadingInitial","pagingParams","set","setPagingParams","setPredicate","value","resetPredicate","forEach","loadActivities","axiosParams","result","setActivity","setPagination","setLoadingInitial","console","log","loadActivity","getActivity","runInAction","isGoing","attendees","some","isHost","hostUsername","host","find","x","Date","state","createActivity","attendee","newActivity","updateActivity","updatedActivity","deleteActivity","updateAttendance","filter","cancelctivityToggle","isCancelled","clearSelectActivity","updateAttendeeFollowing","following","followersCount","makeAutoObservable","reaction","keys","clear","URLSearchParams","toString","toISOString","Array","from","values","sort","b","getTime","entries","activitiesByDate","reduce","activities","format","UserStore","fbAccessToken","fbLoading","refreshTokenTimOut","creds","setToken","startRefreshMethodTimer","modalStore","closeModal","window","localStorage","removeItem","getUser","setImage","setDisplayName","name","getFacebookLoginStatus","FB","getLoginStatus","authResponse","facebookLogin","apiLogin","catch","scope","stopRefreashTimer","jwtToken","atob","split","timeout","exp","now","setTimeout","clearTimeout","ProfileStore","loadingProfile","uploading","followings","loadingFollowings","activeTab","userActivities","loadingActivities","setActiveTab","loadProfile","photo","photos","isMain","p","activityStore","followingCount","loadFollowings","loadUserActivities","getItem","appLoaded","darkMode","setApploaded","setDarkMode","setItem","modal","open","openModal","content","profileStore","commentStore","comments","hubConnection","createHubConnection","activityId","HubConnectionBuilder","withUrl","accessTokenFactory","withAutomaticReconnect","configureLogging","LogLevel","Information","build","start","on","comment","createAt","unshift","stopHubConnection","stop","clearComments","addComment","invoke","StoreContext","createContext","useStore","useContext","observer","Menu","fixed","inverted","Container","Item","as","NavLink","exact","to","header","src","alt","style","marginRight","positive","position","Image","avatar","spaced","Dropdown","pointing","text","Link","icon","onClick","Reveal","animated","Content","visible","width","Button","fluid","color","hidden","basic","e","preventDefault","handleFollow","Card","Header","Description","str","length","substring","truncate","bio","extra","Icon","styles","borderColor","borderWidth","List","horizontal","map","Popup","hoverable","trigger","size","circular","ActivityListItem","Segment","Group","Label","attached","textAlign","marginBottom","secondary","clearing","floated","groupedActivities","group","sub","vertical","className","marginTop","active","has","onChange","ActivityListItemPlaceholder","Placeholder","minHeight","Line","Paragraph","disabled","useState","loadingNext","setLoadingNext","useEffect","Grid","container","stackable","Row","columns","Column","computer","mobile","Loader","pageStart","loadMore","currentPage","hasMore","totalPage","initialLoad","MyTextInput","props","useField","field","meta","Form","Field","touched","label","LoginForm","initialValues","email","password","onSubmit","setErrors","handleSubmit","isSubmitting","autoComplete","placeholder","type","render","maginBottom","ValidationErrors","Message","err","i","validationSchema","Yup","required","isValid","dirty","isLoggedIn","Divider","LoadingComponent","Dimmer","MyTextArea","MySelectInput","helpers","Select","clearable","options","d","setValue","onBlur","setTouched","categoryOptions","MyDateInput","selected","useHistory","useParams","nullable","enableReinitialize","uuid","handleFormSubmit","rows","placeholderText","showTimeSelect","timeCaption","dateFormat","border","resetForm","onKeyPress","shiftKey","Comment","Avatar","Author","Metadata","formatDistanceToNow","Text","whiteSpace","activityImageStyle","activityImageTextStyle","bottom","left","height","padding","zIndex","top","ribbon","colro","float","verticalAlign","relaxed","divided","Extra","TestErrors","widths","baseUrl","primary","NotFound","Inline","message","margin","Modal","onClose","PhotoWidgetCropper","imagePreview","setCropper","initialAspectRatio","aspectRatio","preview","guides","viewMode","autoCropArea","background","onInitialized","cropper","PhotoWidgetDropzone","setFiles","dzStyles","borderRadiws","paddingTop","onDrop","useCallback","acceptedFiles","URL","createObjectURL","useDropzone","getRootProps","getInputProps","isDragActive","PhotoUploadWidget","files","revokeObjectURL","overflow","getCroppedCanvas","toBlob","blob","isCurrentUser","addPhotoMode","setAddPhotoMode","target","setTarget","Tab","Pane","currentTarget","handleSetMainPhoto","handleDeletePhoto","panes","menuItem","pane","menu","onTabChange","activeIndex","handleTabChange","objectFit","Meta","setEditMode","wrapped","Statistic","ProfileHeader","PrivateRoute","Component","component","rest","location","useLocation","finally","hideProgressBar","path","HomePage","ActivityDashboard","ActivityDetails","ActivityForm","ProfilePage","ServerError","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ScrollToTop","pathname","scrollTo","createBrowserHistory","ReactDOM","Provider","document","getElementById"],"mappings":"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","file":"static/js/main.3e1419a4.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapped\":\"profile_wrapped__1dYpx\"};","export interface Pagination {\r\n    currentPage: number;\r\n    itemsPerPage: number;\r\n    totalItems: number;\r\n    totalPage: number;\r\n}\r\n\r\nexport class PaginatedResult<T> {\r\n    data: T;\r\n    pagination: Pagination;\r\n\r\n    constructor(data: T, pagination: Pagination) {\r\n        this.data = data;\r\n        this.pagination = pagination; \r\n    }\r\n}\r\n\r\n\r\nexport class PagingParams {\r\n    pageNumber;\r\n    pageSize; \r\n\r\n    constructor(pageNumber=1 , pageSize =2) {\r\n        this.pageNumber = pageNumber;\r\n        this.pageSize = pageSize; \r\n    }\r\n}","import axios, { AxiosError, AxiosResponse } from 'axios';\r\nimport { toast } from 'react-toastify';\r\nimport { history } from '../..';\r\nimport { Activity, ActivityFormValues } from '../models/activity';\r\nimport { Photo, Profile, UserActivity } from '../models/profile';\r\nimport { User, UserFormValue } from '../models/user';\r\nimport { store } from '../stores/store';\r\nimport { PaginatedResult } from '../models/paginations';\r\n\r\nconst sleep = (delay: number) => {\r\n    return new Promise((resolve) => {\r\n        setTimeout(resolve, delay)\r\n    })\r\n}\r\n\r\naxios.defaults.baseURL = process.env.REACT_APP_API_URL; // to get url from .env \r\n\r\naxios.interceptors.request.use(config => {\r\n    const token = store.commonStore.token;\r\n    if (token) config.headers.Authorization = `Bearer ${token}`\r\n    return config;\r\n})\r\n\r\naxios.interceptors.response.use(async response => {\r\n    if(process.env.NODE_ENV === 'development') await sleep(1000);\r\n    const pagination = response.headers['pagination'];\r\n    if (pagination) {\r\n        response.data = new PaginatedResult(response.data, JSON.parse(pagination));\r\n        return response as AxiosResponse<PaginatedResult<any>>;\r\n    }\r\n    return response;\r\n}, (error: AxiosError) => {\r\n    const { data, status, config, headers} = error.response!;\r\n    switch (status) {\r\n        case 400:\r\n            if (config.method === 'get' && data.errors.hasOwnProperty('id')) {\r\n                history.push('/not-found');\r\n            }\r\n            if (data.errors) {\r\n                const modalStateErrors = [];\r\n                for (const key in data.errors) {\r\n                    if (data.errors[key]) {\r\n                        modalStateErrors.push(data.errors[key])\r\n                    }\r\n                }\r\n                throw modalStateErrors.flat();\r\n            } else {\r\n                toast.error(data);\r\n            }\r\n            break;\r\n        case 401:\r\n            if(status === 401 && headers['ww-Authenticate'].startsWith('Bearer error=\"invalid_token')){\r\n                store.userStore.logout();\r\n                toast.error('Session expired - please login again');\r\n            }\r\n         \r\n            break;\r\n        case 404:\r\n            history.push('/not-found');\r\n            break;\r\n        case 500:\r\n            store.commonStore.setServerError(data);\r\n            history.push('/server-error');\r\n            break;\r\n    }\r\n    return Promise.reject(error);\r\n})\r\n\r\nconst responseBody = <T>(response: AxiosResponse<T>) => response.data;\r\n\r\nconst requests = {\r\n    get: <T>(url: string) => axios.get<T>(url).then(responseBody),\r\n    post: <T>(url: string, body: {}) => axios.post<T>(url, body).then(responseBody),\r\n    put: <T>(url: string, body: {}) => axios.put<T>(url, body).then(responseBody),\r\n    del: <T>(url: string) => axios.delete<T>(url).then(responseBody),\r\n}\r\n\r\nconst Activities = {\r\n    list: (params: URLSearchParams) => axios.get<PaginatedResult<Activity[]>>('/activities', { params })\r\n        .then(responseBody),\r\n    details: (id: string) => requests.get<Activity>(`/activities/${id}`),\r\n    create: (activity: ActivityFormValues) => requests.post<void>('/activities', activity),\r\n    update: (activity: ActivityFormValues) => requests.put<void>(`/activities/${activity.id}`, activity),\r\n    delete: (id: string) => requests.del<void>(`/activities/${id}`),\r\n    attend: (id: string) => requests.post<void>(`/activities/${id}/attend`, {})\r\n}\r\n\r\nconst Account = {\r\n    current: () => requests.get<User>('/account'),\r\n    login: (user: UserFormValue) => requests.post<User>('/account/login', user),\r\n    register: (user: UserFormValue) => requests.post<User>('/account/register', user),\r\n    fbLogin: (accessToken: string) => requests.post<User>(`/account/fbLogin?accessToken=${accessToken}`, {}),\r\n    refreshToken: () => requests.post<User>('/account/refreshToken', {})\r\n\r\n}\r\n\r\n\r\n\r\nconst Profiles = {\r\n    get: (username: string) => requests.get<Profile>(`/profiles/${username}`),\r\n    uploadPhoto: (file: Blob) => {\r\n        let formData = new FormData();\r\n        formData.append('File', file);\r\n        return axios.post<Photo>('photos', formData, {\r\n            headers: { 'Content-type': 'multipart/form-data' }\r\n        })\r\n    },\r\n    setMainPhoto: (id: string) => requests.post(`/photos/${id}/setMain`, {}),\r\n    deletePhoto: (id: string) => requests.del(`/photos/${id}`),\r\n    updateProfile: (profile: Partial<Profile>) => requests.put(`/profiles`,\r\n        profile),\r\n    updateFollowing: (username: string) => requests.post(`/follow/${username}`,\r\n        {}),\r\n    listFollowings: (username: string, predicate: string) =>\r\n        requests.get<Profile[]>(`/follow/${username}?predicate=${predicate}`),\r\n    listActivities: (username: string, predicate: string) =>\r\n        requests.get<UserActivity[]>(`/profiles/${username}/activities?\r\n        predicate=${predicate}`)\r\n}\r\n\r\nconst agent = {\r\n    Activities,\r\n    Account,\r\n    Profiles\r\n}\r\n\r\nexport default agent;","import { Profile } from './profile';\r\nimport { categoryOptions } from '../common/options/categoryOptions';\r\n\r\n\r\nexport interface Activity {\r\n    id: string;\r\n    title: string;\r\n    date: Date | null;\r\n    description: string;\r\n    category: string;\r\n    city: string;\r\n    venue: string;\r\n    hostUsername: string;\r\n    isCancelled: boolean;\r\n    isGoing: boolean;\r\n    isHost: boolean;\r\n    host?: Profile;\r\n    attendees: Profile[]\r\n  }\r\n  export class Activity implements Activity {\r\n    constructor(init?: ActivityFormValues){\r\n      Object.assign(this, init);\r\n    }\r\n  }\r\n\r\n  export class ActivityFormValues {\r\n    id?: string = undefined;\r\n    title: string ='';\r\n    category: string='';\r\n    description: string ='';\r\n    date: Date | null = null;\r\n    city: string ='';\r\n    venue: string ='';\r\n\r\n    constructor(activity?: ActivityFormValues){\r\n       if(activity) {\r\n         this.id= activity.id;\r\n         this.title = activity.title;\r\n         this.category= activity.category;\r\n         this.description= activity.description;\r\n         this.date= activity.date;\r\n         this.city= activity.city;\r\n         this.venue= activity.venue;\r\n       }\r\n    }\r\n  }","import { User } from \"./user\";\r\n\r\nexport interface Profile {\r\n    username: string;\r\n    displayName: string;\r\n    image?: string;\r\n    bio?: string;\r\n    followersCount: number;\r\n    followingCount: number;\r\n    following: boolean;\r\n    photos?: Photo[];\r\n}\r\n\r\nexport class Profile implements Profile {\r\n    constructor(user: User) {\r\n        this.username = user.username;\r\n        this.displayName = user.displayName;\r\n        this.image = user.image;\r\n    }\r\n}\r\n\r\nexport interface Photo {\r\n    id: string;\r\n    url: string;\r\n    isMain: boolean;\r\n}\r\n\r\nexport interface UserActivity {\r\n    id: string;\r\n    title: string;\r\n    category: string;\r\n    date: Date;\r\n   }","import { makeAutoObservable, reaction, runInAction } from \"mobx\";\r\nimport agent from \"../api/agent\";\r\nimport { Activity, ActivityFormValues } from '../models/activity';\r\nimport {format} from 'date-fns'\r\nimport { store } from \"./store\";\r\nimport { Profile } from \"../models/profile\";\r\nimport { Pagination, PagingParams } from \"../models/paginations\";\r\n\r\n\r\n\r\nexport default class ActivityStore {\r\n    activityRegistry = new Map<string, Activity>();\r\n    selectedActivity: Activity | undefined = undefined;\r\n    editMode = false;\r\n    loading = false;\r\n    loadingInitial = false;\r\n    pagination : Pagination | null = null;\r\n    pagingParams = new PagingParams();\r\n    predicate = new Map().set('all', true);\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n\r\n        reaction(\r\n            () => this.predicate.keys(), \r\n            () => {\r\n                this.pagingParams = new PagingParams();\r\n                this.activityRegistry.clear();\r\n                this.loadActivities();\r\n            }\r\n        )\r\n    }\r\n\r\n  \r\n    setPagingParams = (pagingParams: PagingParams) => {\r\n        this.pagingParams = pagingParams;\r\n    }\r\n\r\n    setPredicate = (predicate: string, value: string | Date) =>{\r\n        const resetPredicate = ()=> {\r\n            this.predicate.forEach((value , key ) => {\r\n                if(key !== 'startDate') this.predicate.delete(key);\r\n            })\r\n        }\r\n        switch(predicate){\r\n            case 'all' : \r\n                resetPredicate();\r\n                this.predicate.set('all', true);\r\n                break;\r\n            case 'isGoing' : \r\n                resetPredicate();\r\n                this.predicate.set('isGoing', true);\r\n                break;\r\n            case 'isHost' : \r\n                resetPredicate();\r\n                this.predicate.set('isHost', true);\r\n                break;\r\n            case 'startDate' :\r\n                this.predicate.delete('startDate');\r\n                this.predicate.set('startDate', value);\r\n\r\n        }\r\n    }\r\n\r\n    get axiosParams() {\r\n        const params = new URLSearchParams();\r\n        params.append('pageNumber', this.pagingParams.pageNumber.toString());\r\n        params.append('pageSize', this.pagingParams.pageSize.toString());\r\n        this.predicate.forEach((value , key) => {\r\n            if(key === 'startDate'){\r\n                params.append(key, (value as Date).toISOString())\r\n            }else {\r\n                params.append(key, value);\r\n            }\r\n        })\r\n\r\n        return params;\r\n    }\r\n        // sort array \r\n    get activitiesByDate() {\r\n        return Array.from(this.activityRegistry.values()).sort((a, b) =>\r\n           a.date!.getTime() - b.date!.getTime());\r\n    }\r\n\r\n    get groupedActivities(){\r\n        return Object.entries(\r\n            this.activitiesByDate.reduce((activities, activity) => {\r\n                const date = format(activity.date!, 'dd MMM yyyy') ;\r\n                \r\n                activities[date] = activities[date] ? [...activities[date], activity] : [activity];\r\n          \r\n                return activities;\r\n            }, {} as {[key: string]: Activity []}) // => to define datatype of activities and activity\r\n        )\r\n    }\r\n\r\n    loadActivities = async () => {\r\n        this.loadingInitial = true;\r\n        try {\r\n            const result = await agent.Activities.list(this.axiosParams);\r\n            result.data.forEach(activity => {\r\n                this.setActivity(activity);\r\n            })\r\n            this.setPagination(result.pagination);\r\n            this.setLoadingInitial(false);\r\n        } catch (error) {\r\n            console.log(error);\r\n            this.setLoadingInitial(false);\r\n        }\r\n    }\r\n\r\n    setPagination = (pagination : Pagination) => {\r\n        this.pagination = pagination;\r\n    }\r\n\r\n    loadActivity = async (id: string) => {\r\n        let activity = this.getActivity(id);\r\n        if (activity) {\r\n            this.selectedActivity = activity;\r\n            return activity;\r\n        } else {\r\n            this.loadingInitial = true;\r\n            try {\r\n                activity = await agent.Activities.details(id);\r\n                this.setActivity(activity);\r\n                runInAction(() => {\r\n                    this.selectedActivity = activity;\r\n                })\r\n                this.setLoadingInitial(false);\r\n                return activity;\r\n            } catch (error) {\r\n                console.log(error);\r\n                this.setLoadingInitial(false);\r\n            }\r\n        }\r\n    }\r\n\r\n    private setActivity = (activity: Activity) => {\r\n        const user = store.userStore.user;\r\n        if(user){\r\n            activity.isGoing = activity.attendees!.some(\r\n                a=> a.username===user.username\r\n             )\r\n             activity.isHost= activity.hostUsername === user.username;\r\n             activity.host= activity.attendees?.find(x => x.username === activity.hostUsername);\r\n        }\r\n        activity.date = new Date(activity.date!);\r\n        this.activityRegistry.set(activity.id, activity);\r\n    }\r\n\r\n    private getActivity = (id: string) => {\r\n        return this.activityRegistry.get(id);\r\n    }\r\n\r\n    setLoadingInitial = (state: boolean) => {\r\n        this.loadingInitial = state;\r\n    }\r\n\r\n    createActivity = async (activity: ActivityFormValues) => {\r\n        const user = store.userStore.user;\r\n        const attendee = new Profile(user!);\r\n        try {\r\n            await agent.Activities.create(activity);\r\n            const newActivity = new Activity(activity);\r\n            newActivity.hostUsername = user!.username;\r\n            newActivity.attendees = [attendee];\r\n            this.setActivity(newActivity);\r\n            runInAction(() => {\r\n                this.selectedActivity = newActivity;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    updateActivity = async (activity: ActivityFormValues) => {\r\n        try {\r\n            await agent.Activities.update(activity);\r\n            runInAction(() => {\r\n                if(activity.id){\r\n                    let updatedActivity = {...this.getActivity(activity.id), ...activity};\r\n                    this.activityRegistry.set(activity.id, updatedActivity as Activity);\r\n                    this.selectedActivity = updatedActivity as Activity;\r\n                }\r\n               \r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => {\r\n                this.loading = false;\r\n            })\r\n        }\r\n    }\r\n\r\n    deleteActivity = async (id: string) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Activities.delete(id);\r\n            runInAction(() => {\r\n                this.activityRegistry.delete(id);\r\n                this.loading = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => {\r\n                this.loading = false;\r\n            })\r\n        }\r\n    }\r\n\r\n\r\n    updateAttendance = async ()=>  {\r\n        const user = store.userStore.user;\r\n        this.loading= true;\r\n\r\n        try {\r\n            await agent.Activities.attend(this.selectedActivity!.id);\r\n            runInAction(()=> {\r\n                if(this.selectedActivity?.isGoing){\r\n                    this.selectedActivity.attendees= \r\n                        this.selectedActivity.attendees?.filter(a => a.username !== user?.username);\r\n                    this.selectedActivity.isGoing = false;\r\n                } else {\r\n                    const attendee = new Profile(user!);\r\n                    this.selectedActivity?.attendees?.push(attendee);\r\n                    this.selectedActivity!.isGoing= true;\r\n                }\r\n                this.activityRegistry.set(this.selectedActivity!.id, this.selectedActivity!);\r\n            })\r\n\r\n        }catch (error) {\r\n            console.log(error)\r\n        } finally {\r\n            runInAction(()=> this.loading = false);\r\n        }\r\n    }\r\n\r\n    cancelctivityToggle = async () =>{\r\n        this.loading = true;\r\n        try {\r\n            await agent.Activities.attend(this.selectedActivity!.id);\r\n            runInAction(()=> {\r\n                this.selectedActivity!.isCancelled =!this.selectedActivity?.isCancelled;\r\n                this.activityRegistry.set(this.selectedActivity!.id, this.selectedActivity!);\r\n            })\r\n\r\n        } catch (error) {       \r\n            console.log(error);\r\n        } finally{\r\n            runInAction(()=> {\r\n                this.loading= false;\r\n            })\r\n        }\r\n    }\r\n\r\n    clearSelectActivity =()=> {\r\n        this.selectedActivity= undefined;\r\n    }\r\n\r\n    updateAttendeeFollowing = (username : string) => {\r\n        this.activityRegistry.forEach(activity => {\r\n            activity.attendees.forEach(attendee => {\r\n                if(attendee.username === username) {\r\n                    attendee.following ? attendee.followersCount-- : attendee.followersCount++;\r\n                    attendee.following = !attendee.following;\r\n                }\r\n            })\r\n        })\r\n    }\r\n\r\n\r\n}\r\n","import { makeAutoObservable, runInAction } from \"mobx\";\r\nimport { history } from \"../..\";\r\nimport agent from \"../api/agent\";\r\nimport { User, UserFormValue } from \"../models/user\";\r\nimport { store } from \"./store\";\r\n\r\nexport default class UserStore {\r\n    user: User | null = null;\r\n    fbAccessToken: string | null = null;\r\n    fbLoading = false;\r\n    refreshTokenTimOut: any;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this)\r\n    }\r\n\r\n    get isLoggedIn() {\r\n        return !!this.user;\r\n    }\r\n\r\n    login = async (creds: UserFormValue) => {\r\n        try {\r\n            const user = await agent.Account.login(creds);\r\n            store.commonStore.setToken(user.token);\r\n            this.startRefreshMethodTimer(user);\r\n            runInAction(() => this.user = user);\r\n            history.push('/activities');\r\n            store.modalStore.closeModal();\r\n        } catch (error) {\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    logout = () => {\r\n        store.commonStore.setToken(null);\r\n        window.localStorage.removeItem('jwt');\r\n        this.user = null;\r\n        history.push('/');\r\n    }\r\n\r\n    getUser = async () => {\r\n        try {\r\n            const user = await agent.Account.current();\r\n            store.commonStore.setToken(user.token);\r\n            runInAction(() => this.user = user);\r\n            this.startRefreshMethodTimer(user);\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    register = async (creds: UserFormValue) => {\r\n        try {\r\n            const user = await agent.Account.register(creds);\r\n            store.commonStore.setToken(user.token);\r\n            this.startRefreshMethodTimer(user);\r\n            runInAction(() => this.user = user);\r\n            history.push('/activities');\r\n            store.modalStore.closeModal();\r\n        } catch (error) {\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    setImage = (image: string) => {\r\n        if (this.user) this.user.image = image;\r\n    } \r\n\r\n    setDisplayName = (name: string) => {\r\n        if (this.user) this.user.displayName = name;\r\n    }\r\n\r\n    getFacebookLoginStatus = async () => {\r\n        window.FB.getLoginStatus(response => {\r\n         \r\n            if (response.status === 'connected') {\r\n                this.fbAccessToken = response.authResponse.accessToken;\r\n            }\r\n        })\r\n    }\r\n\r\n    facebookLogin = () => {\r\n        this.fbLoading = true;\r\n        const apiLogin = (accessToken: string) => {\r\n            agent.Account.fbLogin(accessToken).then(user => {\r\n                store.commonStore.setToken(user.token);\r\n                this.startRefreshMethodTimer(user);\r\n                runInAction(() => {\r\n                    this.user = user;\r\n                    this.fbLoading = false;\r\n                })\r\n                history.push('/activities');\r\n            }).catch(error => {\r\n                console.log(\"login error\",error);\r\n                runInAction(() => this.fbLoading = false);\r\n            })\r\n        }\r\n        if (this.fbAccessToken) {\r\n            apiLogin(this.fbAccessToken);\r\n        } else {\r\n            window.FB.login(response => {\r\n                apiLogin(response.authResponse.accessToken);\r\n            }, {scope: 'public_profile,email'})\r\n        }\r\n    }\r\n\r\n    refreshToken = async () => {\r\n        this.stopRefreashTimer();\r\n        try {\r\n            const user = await agent.Account.refreshToken();\r\n            runInAction(()=>  {\r\n                this.user = user;\r\n            })\r\n            store.commonStore.setToken(user.token);\r\n            this.startRefreshMethodTimer(user);\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    private startRefreshMethodTimer (user:User) {\r\n        const jwtToken = JSON.parse(atob(user.token.split('.')[1]));\r\n        const expires = new Date(jwtToken.exp * 1000);\r\n        const timeout = expires.getTime()- Date.now() -(60 *1000);\r\n\r\n        this.refreshTokenTimOut = setTimeout(this.refreshToken, timeout);\r\n    }\r\n\r\n    private stopRefreashTimer () {\r\n        clearTimeout(this.refreshTokenTimOut);\r\n    }\r\n\r\n}","import { makeAutoObservable, reaction, runInAction } from \"mobx\";\r\nimport agent from \"../api/agent\";\r\nimport { Photo, Profile, UserActivity } from \"../models/profile\";\r\nimport { store } from \"./store\";\r\n\r\nexport default class ProfileStore {\r\n    profile: Profile | null = null;\r\n    loadingProfile = false;\r\n    uploading = false;\r\n    loading = false;\r\n    followings: Profile[] = [];\r\n    loadingFollowings = false;\r\n    activeTab = 0;\r\n    userActivities: UserActivity[] = [];\r\n    loadingActivities = false;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n\r\n        reaction(\r\n            () => this.activeTab,\r\n            activeTab => {\r\n                if (activeTab == 3 || activeTab === 4) {\r\n                    const predicate = activeTab === 3 ? 'followers' : 'following';\r\n                    this.loadFollowings(predicate)\r\n                } else {\r\n                    this.followings = [];\r\n                }\r\n            }\r\n        )\r\n    }\r\n\r\n    setActiveTab = (activeTab: any) => {\r\n        this.activeTab = activeTab;\r\n    }\r\n\r\n    get isCurrentUser() {\r\n        if (store.userStore.user && this.profile) {\r\n            return store.userStore.user.username === this.profile.username;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    loadProfile = async (username: string) => {\r\n        this.loadingProfile = true;\r\n        try {\r\n            const profile = await agent.Profiles.get(username);\r\n            console.log(profile);\r\n            runInAction(() => {\r\n                this.profile = profile;\r\n                this.loadingProfile = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => this.loadingProfile = false);\r\n        }\r\n    }\r\n\r\n    uploadPhoto = async (file: Blob) => {\r\n        this.uploading = true;\r\n        try {\r\n            const response = await agent.Profiles.uploadPhoto(file);\r\n            const photo = response.data;\r\n            runInAction(() => {\r\n                if (this.profile) {\r\n                    this.profile.photos?.push(photo);\r\n                    if (photo.isMain && store.userStore.user) {\r\n                        store.userStore.setImage(photo.url);\r\n                        this.profile.image = photo.url;\r\n                    }\r\n                }\r\n                this.uploading = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => this.uploading = false);\r\n        }\r\n    }\r\n\r\n    setMainPhoto = async (photo: Photo) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Profiles.setMainPhoto(photo.id);\r\n            store.userStore.setImage(photo.url);\r\n            runInAction(() => {\r\n                if (this.profile && this.profile.photos) {\r\n                    this.profile.photos.find(p => p.isMain)!.isMain = false;\r\n                    this.profile.photos.find(p => p.id === photo.id)!.isMain = true;\r\n                    this.profile.image = photo.url;\r\n                    this.loading = false;\r\n                }\r\n            })\r\n        } catch (error) {\r\n            runInAction(() => this.loading = false);\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    deletePhoto = async (photo: Photo) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Profiles.deletePhoto(photo.id);\r\n            runInAction(() => {\r\n                if (this.profile) {\r\n                    this.profile.photos = this.profile.photos?.filter(p => p.id !== photo.id);\r\n                    this.loading = false;\r\n                }\r\n            })\r\n        } catch (error) {\r\n            runInAction(() => this.loading = false);\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    updateFollowing = async (username: string, following: boolean) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Profiles.updateFollowing(username);\r\n            store.activityStore.updateAttendeeFollowing(username);\r\n            runInAction(() => {\r\n                if (this.profile && this.profile.username !== store.userStore.user?.username && this.profile.username !== username) {\r\n                    following ? this.profile.followersCount++ : this.profile.followersCount--;\r\n                    this.profile.following = !this.profile.following;\r\n                }\r\n                if (this.profile && this.profile.username == store.userStore.user?.username) {\r\n                    following ? this.profile.followingCount++ : this.profile.followersCount--;\r\n                }\r\n                this.followings.forEach(profile => {\r\n                    if (profile.username === username) {\r\n                        profile.following ? profile.followersCount-- : profile.followersCount++;\r\n                        profile.following = !profile.following;\r\n                    }\r\n\r\n                })\r\n                this.loading = false;\r\n            })\r\n\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => {\r\n                this.loading = false;\r\n            })\r\n        }\r\n    }\r\n\r\n    loadFollowings = async (predicate: string) => {\r\n        this.loadingFollowings = true;\r\n        try {\r\n            const followings = await agent.Profiles.listFollowings(this.profile!.username, predicate);\r\n            runInAction(() => {\r\n                this.followings = followings;\r\n                this.loadingFollowings = false;\r\n            })\r\n        } catch (error) {\r\n            runInAction(() => this.loadingFollowings = false);\r\n        }\r\n    }\r\n\r\n    loadUserActivities = async (username: string, predicate?: string) => {\r\n        this.loadingActivities = true;\r\n        try {\r\n            const activities = await agent.Profiles.listActivities(username,\r\n                predicate!);\r\n            runInAction(() => {\r\n                this.userActivities = activities;\r\n                this.loadingActivities = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => {\r\n                this.loadingActivities = false;\r\n            })\r\n        }\r\n    }\r\n\r\n    updateProfile = async (profile: Partial<Profile>) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Profiles.updateProfile(profile);\r\n            runInAction(() => {\r\n                if (profile.displayName && profile.displayName !==\r\n                    store.userStore.user?.displayName) {\r\n                    store.userStore.setDisplayName(profile.displayName);\r\n                }\r\n                this.profile = { ...this.profile, ...profile as Profile };\r\n                this.loading = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => this.loading = false);\r\n        }\r\n    }\r\n}","import {createContext, useContext} from 'react'\r\nimport ActivityStore from \"./activityStore\";\r\nimport CommonStore from './commonStroe'\r\nimport UserStore from './userStore';\r\nimport ModalStore from './modalStore';\r\nimport ProfileStore from './profileStore';\r\nimport CommentStore from './CommentStore';\r\n\r\ninterface Store {\r\n    activityStore : ActivityStore;\r\n    commonStore: CommonStore; \r\n    userStore: UserStore;\r\n    modalStore: ModalStore;\r\n    profileStore: ProfileStore;\r\n    commentStore: CommentStore;\r\n}\r\n\r\nexport const store: Store = {\r\n    activityStore: new ActivityStore (),\r\n    commonStore: new CommonStore(),\r\n    userStore: new UserStore(),\r\n    modalStore: new ModalStore(),\r\n    profileStore: new ProfileStore(),\r\n    commentStore: new CommentStore()\r\n}\r\n\r\nexport const StoreContext= createContext(store);\r\n\r\n\r\nexport function useStore(){\r\n    return useContext(StoreContext);\r\n}","import { StoreContext } from './store';\r\nimport { ServerErrors } from './../models/serverErrors';\r\nimport { makeAutoObservable, reaction } from 'mobx';\r\nimport { useContext } from 'react';\r\n\r\n\r\nexport default class CommonStore {\r\n    error: ServerErrors | null = null;\r\n    token: string | null= window.localStorage.getItem('jwt');\r\n    appLoaded = false;\r\n    darkMode = false;\r\n\r\n\r\n    constructor(){\r\n        makeAutoObservable(this);\r\n        \r\n        reaction(\r\n            ()=> this.token,\r\n            token => \r\n             {\r\n                 if(token){\r\n                     window.localStorage.setItem('jwt', token);\r\n                 }else {\r\n                     window.localStorage.removeItem('jwt')\r\n                 }\r\n             }\r\n        )\r\n     \r\n    }\r\n\r\n    setServerError=(error: ServerErrors)=> {\r\n        this.error= error;\r\n    }\r\n    setToken = (token :string | null)=>{\r\n        this.token = token;\r\n    }\r\n\r\n    setApploaded = ()=> {\r\n        this.appLoaded= true;\r\n    }\r\n    setDarkMode= ()=> {\r\n        this.darkMode= !this.darkMode;\r\n    }\r\n\r\n}","import {makeAutoObservable} from 'mobx'\r\n\r\n\r\ninterface Modal {\r\n    open: boolean,\r\n    body: JSX.Element | null\r\n}\r\n\r\nexport default class ModalStore {\r\n\r\n    modal: Modal = {\r\n        open: false,\r\n        body: null\r\n    }\r\n    constructor (){\r\n        makeAutoObservable(this)\r\n    }\r\n    openModal =(content: JSX.Element)=> {\r\n        this.modal.open= true;\r\n        this.modal.body= content;\r\n    }\r\n\r\n    closeModal = ()=>{\r\n        this.modal.open = false;\r\n        this.modal.body= null;\r\n\r\n    }\r\n\r\n\r\n}","import { HubConnection, HubConnectionBuilder, LogLevel } from \"@microsoft/signalr\";\r\nimport { makeAutoObservable, runInAction } from \"mobx\";\r\nimport { ChatComment } from \"../models/comment\";\r\nimport { store } from \"./store\";\r\n\r\nexport default class CommentStore {\r\n    comments: ChatComment[] = [];\r\n    hubConnection: HubConnection | null = null;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n    }\r\n\r\n    createHubConnection = (activityId: string) => {\r\n        if (store.activityStore.selectedActivity) {\r\n            this.hubConnection = new HubConnectionBuilder()\r\n                .withUrl(process.env.REACT_APP_CHAT_URL + '?activityId=' + activityId, {\r\n                    accessTokenFactory: () => store.userStore.user?.token!\r\n                })\r\n                .withAutomaticReconnect()\r\n                .configureLogging(LogLevel.Information)\r\n                .build();\r\n\r\n            this.hubConnection.start().catch(error => console.log('Error establishing the connection: ', error));\r\n\r\n            this.hubConnection.on('LoadComments', (comments: ChatComment[]) => {\r\n                runInAction(() => {\r\n                    comments.forEach(comment => {\r\n                        comment.createAt = new Date(comment.createAt + 'Z');\r\n                    })\r\n                    this.comments = comments\r\n                });\r\n            })\r\n\r\n            this.hubConnection.on('ReceiveComment', (comment: ChatComment) => {\r\n                runInAction(() => {\r\n                    comment.createAt = new Date(comment.createAt);\r\n                    this.comments.unshift(comment)\r\n                });\r\n            })\r\n        }\r\n    }\r\n\r\n    stopHubConnection = () => {\r\n        this.hubConnection?.stop().catch(error => console.log('Error stopping connection: ', error));\r\n    }\r\n\r\n    clearComments = () => {\r\n        this.comments = [];\r\n        this.stopHubConnection();\r\n    }\r\n\r\n    addComment = async (values: any) => {\r\n        values.activityId = store.activityStore.selectedActivity?.id;\r\n        try {\r\n            await this.hubConnection?.invoke('SendComment', values);\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n}","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Link, NavLink } from 'react-router-dom';\r\nimport { Container, Menu, Image, Dropdown,    } from 'semantic-ui-react';\r\nimport { useStore } from '../stores/store';\r\nimport './styles.css';\r\n\r\nexport default observer(function NavBar() {\r\n    const { userStore: { user, logout } } = useStore();\r\n \r\n    return (\r\n        <Menu  fixed='top' inverted> \r\n            <Container >\r\n                <Menu.Item as={NavLink} exact to='/' header>\r\n                    <img src='/assets/logo.png' alt='logo' style={{ marginRight: '10px' }} />\r\n                    Reactivities\r\n                </Menu.Item>\r\n                <Menu.Item as={NavLink} to='/activities' name='Activities' />\r\n              {/*   <Menu.Item as={NavLink} to='/errors' name='Errors' /> */}\r\n                \r\n                    <Menu.Item as={NavLink} to='/createActivity' positive content='Create Activity' />\r\n           \r\n   \r\n                <Menu.Item position='right'>\r\n                    <Image src={user?.image || '/assets/user.png'} avatar spaced='right' />\r\n                    <Dropdown pointing='top left' text={user?.displayName}>\r\n                        <Dropdown.Menu>\r\n                            <Dropdown.Item as={Link} to={`/profiles/${user?.username}`} \r\n                                text='My Profile' icon='user' />\r\n                            <Dropdown.Item onClick={logout} text='Logout' icon='power' />\r\n                        </Dropdown.Menu>\r\n                    </Dropdown>\r\n                </Menu.Item>\r\n            </Container>\r\n        </Menu>\r\n    )\r\n})","import React, { SyntheticEvent } from 'react';\r\nimport { Profile } from '../../app/models/profile';\r\nimport {observer} from 'mobx-react-lite';\r\nimport {Reveal, Button} from 'semantic-ui-react'\r\nimport { useStore } from '../../app/stores/store';\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\nexport default observer(function FollowButton({profile}: Props){\r\n    const {profileStore, userStore} = useStore();\r\n    const {updateFollowing , loading} = profileStore;\r\n\r\n    if(userStore.user?.username === profile.username) return null;\r\n\r\n    function handleFollow(e:SyntheticEvent, username :string ){\r\n        e.preventDefault();\r\n        profile.following ? updateFollowing(username, false) : updateFollowing(username, true);\r\n\r\n    }\r\n\r\n    return(\r\n        <Reveal animated='move'>\r\n        <Reveal.Content visible style={{width:'100%'}}>\r\n         <Button\r\n          fluid \r\n          color='teal'\r\n           content={profile.following ? 'Fllowing' : 'not following'} />\r\n         </Reveal.Content>  \r\n         <Reveal.Content hidden style={{width:'100%'}}>\r\n         <Button\r\n             fluid\r\n             basic\r\n             color={true ? 'red': 'green'} \r\n             content={profile.following ? 'Unfollow' : 'Follow'}\r\n             loading={loading}\r\n             onClick={(e)=> handleFollow(e, profile.username)} />\r\n         </Reveal.Content>  \r\n     </Reveal>\r\n    )\r\n})\r\n    \r\n\r\n\r\n\r\n","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Card, Icon, Image } from 'semantic-ui-react';\r\nimport { Profile } from '../../app/models/profile';\r\nimport FollowButton from './FollowButton';\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\n\r\nexport default observer(function ProfileCard({ profile }: Props) {\r\n\r\n    function truncate(str: string | undefined) {\r\n        if (str) {\r\n            return str.length > 40 ? str.substring(0, 37) + '...' : str;\r\n        }\r\n    }\r\n    return (\r\n        <Card as={Link} to={`/profiles/${profile.username}`}>\r\n            <Image src={profile.image || '/assets/user.png'} />\r\n            <Card.Content>\r\n                <Card.Header>{profile.displayName}</Card.Header>\r\n                <Card.Description>{truncate(profile.bio)}</Card.Description>\r\n            </Card.Content>\r\n            <Card.Content extra>\r\n                <Icon name='user' />\r\n                {profile.followersCount} followers\r\n            </Card.Content>\r\n            <FollowButton profile={profile} />\r\n        </Card>\r\n    )\r\n})\r\n","import React from 'react';\r\nimport {observer} from 'mobx-react-lite'\r\nimport { Profile } from '../../../app/models/profile';\r\nimport{Image, List, Popup} from 'semantic-ui-react'\r\nimport { Link } from 'react-router-dom';\r\nimport ProfileCard from '../../profiles/ProfileCard'\r\nimport '../../../app/layout/styles.css';\r\ninterface Props {\r\n    attendees: Profile[];\r\n}\r\n\r\nexport default observer (function ActivityListItemAttendee({attendees}: Props){\r\n \r\n    const styles = {\r\n        borderColor: 'orange',\r\n        borderWidth: 3\r\n    };\r\n   \r\n    return (\r\n        <List horizontal>\r\n            {attendees.map(attendee => (\r\n           \r\n                    <Popup\r\n                        hoverable\r\n                        key={attendee.username}\r\n                        trigger={\r\n                            <List.Item key ={attendee.username} as={Link} to={`/profiles/${attendee.username}`} >\r\n                            <Image \r\n                             size='mini' \r\n                             circular \r\n                             src={attendee.image || '/assets/user.png'} \r\n                             style={attendee.following ? styles : null }\r\n                             \r\n                             />\r\n                            </List.Item>\r\n                        }\r\n                    >\r\n                        <Popup.Content >\r\n                            <ProfileCard profile= {attendee}/>\r\n                        </Popup.Content>\r\n                    </Popup>\r\n           \r\n            ))}\r\n        \r\n        </List>\r\n    )\r\n\r\n})","import React from 'react';\r\nimport { Button, Icon, Item, Label, Segment } from 'semantic-ui-react';\r\nimport {Activity} from '../../../app/models/activity'\r\nimport { Link } from 'react-router-dom';\r\nimport {format } from 'date-fns';\r\nimport ActivityListItemAttendee from './ActivityListItemAttendee'\r\n\r\ninterface Props {\r\n    activity: Activity;\r\n}\r\n\r\nexport default function ActivityListItem({activity}: Props){\r\n\r\n    return( \r\n        <Segment.Group >\r\n            <Segment  >\r\n                 {activity.isCancelled && \r\n                    <Label attached='top' color='red' content='Cancelled ' style={{textAlign: 'center'}}/>\r\n                 \r\n                 }\r\n                <Item.Group>\r\n                    <Item >\r\n                        <Item.Image\r\n                         style={{marginBottom: 3}}\r\n                           size='tiny' \r\n                           circular \r\n                           src={activity.host?.image || '/assets/user.png'}\r\n                           \r\n                           />\r\n                        <Item.Content>\r\n                            <Item.Header\r\n                             as={Link} \r\n                             to={`/activities/${activity.id}`}\r\n                             \r\n                             >\r\n                                {activity.title}\r\n                            </Item.Header>\r\n                            <Item.Description\r\n                            \r\n                            \r\n                            >Hoset by<Link to={`/profiles/${activity.hostUsername}`}> {activity.host?.displayName}</Link> </Item.Description>\r\n                            {activity.isHost && (\r\n                                <Item.Description>\r\n                                    <Label basic color ='orange' >\r\n                                        You ar hosting this activity\r\n                                    </Label>\r\n                                </Item.Description>\r\n                            )}\r\n\r\n                            {activity.isGoing && !activity.isHost && (\r\n                                <Item.Description>\r\n                                    <Label basic color ='green' >\r\n                                        You ar going this activity\r\n                                    </Label>\r\n                                </Item.Description>\r\n                            )}\r\n                        </Item.Content>\r\n                    </Item>\r\n                </Item.Group>\r\n            </Segment>\r\n            <Segment >\r\n                <span>\r\n                    <Icon name='clock' /> {format(activity.date!, 'dd MM yyyy h:mm aa')}\r\n                    <Icon name='marker' />{activity.venue}\r\n                </span>\r\n            </Segment>\r\n            <Segment secondary>\r\n               <ActivityListItemAttendee attendees ={activity.attendees!} />\r\n            </Segment>\r\n            <Segment clearing >\r\n                <span>{activity.description}</span>\r\n                <Button \r\n                    as={Link}\r\n                    to={`/activities/${activity.id}`}\r\n                    color='teal'\r\n                    floated='right'\r\n                    content='View'\r\n                \r\n                />\r\n            </Segment>\r\n        </Segment.Group>\r\n    \r\n    );\r\n}","import React, { Fragment } from 'react';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { Header, Item, Segment } from 'semantic-ui-react';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport ActivityListItem from './ActivityListItem'\r\n\r\nexport default observer( function ActivityList(){\r\n    const {activityStore}= useStore();\r\n    const { groupedActivities}= activityStore;\r\n\r\n\r\n\r\n  \r\nreturn (\r\n    <>\r\n        {groupedActivities.map(([group, activities]) => (\r\n            <Fragment key={group}>\r\n                <Header sub color='teal'>\r\n                    {group}\r\n                </Header>\r\n                        {activities.map(activity =>\r\n                            (<ActivityListItem key={activity.id} activity={activity} />\r\n                        ))}\r\n              \r\n            </Fragment>\r\n         ))}\r\n\r\n    </>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport Calendar from 'react-calendar';\r\nimport { Header, Menu } from 'semantic-ui-react';\r\nimport ActivityStore from '../../../app/stores/activityStore';\r\nimport { useStore } from '../../../app/stores/store';\r\n\r\nexport default observer (function ActivityFilters() {\r\n    const {activityStore: {predicate, setPredicate}, commonStore} = useStore();\r\n\r\n    return (\r\n        <>\r\n            <Menu vertical size='large'  className={commonStore.darkMode ? 'darkeMode items' : \"\" } style={{ width: '100%', marginTop: 25 }}>\r\n                <Header className={commonStore.darkMode ? 'darkeMode' : \"\" } icon='filter' attached color='teal' content='Filters' />\r\n                <Menu.Item\r\n                    content='All Activites'\r\n                   \r\n                    active= {predicate.has('all')}\r\n                    onClick={()=> setPredicate('all', 'true')} />\r\n                <Menu.Item \r\n                    content=\"I'm going\"\r\n                    active= {predicate.has('isGoing')}\r\n                    onClick={()=> setPredicate('isGoing', 'true')} />\r\n                <Menu.Item\r\n                    content=\"I'm hosting\" \r\n                    active= {predicate.has('isHost')}\r\n                    onClick={()=> setPredicate('isHost', 'true')} />\r\n                </Menu>\r\n            <Header />\r\n            <Calendar \r\n                className={commonStore.darkMode ? 'darkeMode calander ' : \"\" }\r\n                onChange={(date) => setPredicate('startDate', date as Date)}\r\n                value={predicate.get('startDate') || new Date()}\r\n            />\r\n        </>\r\n    )\r\n})","import React, { Fragment } from 'react';\r\nimport { Segment, Button, Placeholder } from 'semantic-ui-react';\r\n\r\nexport default function ActivityListItemPlaceholder() {\r\n    return (\r\n        <Fragment>\r\n            <Placeholder fluid style={{ marginTop: 25 }}>\r\n                <Segment.Group>\r\n                    <Segment style={{ minHeight: 110 }}>\r\n                        <Placeholder>\r\n                            <Placeholder.Header image>\r\n                                <Placeholder.Line />\r\n                                <Placeholder.Line />\r\n                            </Placeholder.Header>\r\n                            <Placeholder.Paragraph>\r\n                                <Placeholder.Line />\r\n                            </Placeholder.Paragraph>\r\n                        </Placeholder>\r\n                    </Segment>\r\n                    <Segment>\r\n                        <Placeholder>\r\n                            <Placeholder.Line />\r\n                            <Placeholder.Line />\r\n                        </Placeholder>\r\n                    </Segment>\r\n                    <Segment secondary style={{ minHeight: 70 }} />\r\n                    <Segment clearing>\r\n                        <Button disabled color='blue' floated='right' content='View' />\r\n                    </Segment>\r\n                </Segment.Group>\r\n            </Placeholder>\r\n        </Fragment>\r\n    );\r\n};\r\n","import React, { useEffect, useState } from 'react';\r\nimport { Grid, List, Loader, Segment } from 'semantic-ui-react';\r\nimport ActivityList from \"./ActiviytList\"\r\nimport { useStore } from '../../../app/stores/store';\r\nimport { observer } from 'mobx-react-lite';\r\nimport LoadingComponent from '../../../app/layout/LoadingComponent';\r\nimport ActivityFilters from './ActivityFilters'\r\nimport { PagingParams } from '../../../app/models/paginations';\r\nimport InfiniteScroll from 'react-infinite-scroller';\r\nimport ActivityListItemPlaceholder from './ActivityListItemPlaceholder';\r\n\r\n\r\n\r\n\r\n\r\nexport default observer(function ActivityDashboard() {\r\n\r\n    const { activityStore } = useStore();\r\n    const { loadActivities, activityRegistry, setPagingParams, pagination } = activityStore;\r\n    const [loadingNext, setLoadingNext] = useState(false);\r\n\r\n    function handleGetNext() {\r\n        setLoadingNext(true);\r\n        setPagingParams(new PagingParams(pagination!.currentPage + 1))\r\n        loadActivities().then(() => setLoadingNext(false));\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (activityRegistry.size <= 1)\r\n            loadActivities();\r\n\r\n    }, [activityRegistry.size, loadActivities]);\r\n\r\n\r\n\r\n\r\n    return (\r\n        <Grid  container stackable>\r\n\r\n        <Grid.Row columns={2}>\r\n                <Grid.Column computer={4} mobile={16}>\r\n                 \r\n                        <ActivityFilters />\r\n                         <Loader active={loadingNext} />\r\n                   \r\n                </Grid.Column>\r\n                <Grid.Column computer={11} mobile={16}>\r\n                       \r\n                                {activityStore.loadingInitial && !loadingNext ? (\r\n                                    <>\r\n                                        <ActivityListItemPlaceholder />\r\n                                        <ActivityListItemPlaceholder />\r\n                                    </>\r\n                            ) : (\r\n                                <List>\r\n                                    <InfiniteScroll\r\n                                        pageStart={0}\r\n                                        loadMore={handleGetNext}\r\n                                        hasMore={!loadingNext && !!pagination && pagination.currentPage < pagination.totalPage}\r\n                                        initialLoad={false}\r\n                                    >\r\n                                        < ActivityList />\r\n                                    </InfiniteScroll>\r\n                                </List>\r\n                            )}\r\n\r\n                        \r\n                </Grid.Column>\r\n            </Grid.Row>\r\n        </Grid>\r\n    )\r\n})","import React from 'react';\r\nimport {useField} from 'formik';\r\nimport {Form, Label} from 'semantic-ui-react';\r\n\r\ninterface Props {\r\n    placeholder: string;\r\n    name: string;\r\n    label?: string;\r\n    type?: string;\r\n\r\n}\r\n\r\nexport default function MyTextInput(props: Props){\r\n    const[field, meta]= useField(props.name);\r\n\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error}> {/* !!meta.error => '!! meens make meta.error  introbolean '*/}\r\n            <label>{props.label}</label>\r\n            <input {...field} {...props}/>\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color='red'>{meta.error}</Label>\r\n            ): null}\r\n        </Form.Field>\r\n    )\r\n}","import { ErrorMessage, Form, Formik } from 'formik';\r\nimport React from 'react';\r\nimport { Button, Header, Label } from 'semantic-ui-react';\r\nimport MyTextInput from '../../app/common/form/MyTextInput';\r\nimport { useStore } from '../../app/stores/store';\r\n\r\n\r\nexport default function LoginForm(){\r\n    const {userStore} = useStore();\r\n    return (\r\n        <Formik\r\n            initialValues={{email: '', password: '' , error: null}}\r\n           onSubmit={(values, {setErrors})=> userStore.login(values)\r\n                        .catch(error => setErrors({error: \"Invalid email or password\"}))}\r\n        >\r\n            {({handleSubmit, isSubmitting, errors})=> (\r\n                <Form className ='ui form' onSubmit={handleSubmit} autoComplete='off'>\r\n                    <Header  as='h2' content='Login to Reactivities ' color='teal' textAlign='center' />\r\n                    <MyTextInput name='email' placeholder='Email'  />\r\n                    <MyTextInput name='password' type ='password' placeholder='Password'  />\r\n                    <ErrorMessage \r\n                        name=\"error\"\r\n                        render={()=> <Label style={{maginBottom: 10}} basic color='red' content= {errors.error}/> }\r\n                    \r\n                    />\r\n                     <Button loading={isSubmitting}  positive content='Login' type='submit' fluid/>\r\n                    \r\n                </Form>\r\n            )}\r\n\r\n        </Formik>\r\n    )\r\n}","import React from 'react';\r\nimport { Message } from 'semantic-ui-react';\r\n\r\ninterface Props {\r\n    errors: any;\r\n}\r\n\r\nexport default function ValidationErrors({errors}: Props) {\r\n    return (\r\n        <Message error>\r\n            {errors && (\r\n                <Message.List>\r\n                    {errors.map((err: any, i: any) => (\r\n                        <Message.Item key={i}>{err}</Message.Item>\r\n                    ))}\r\n                </Message.List>\r\n            )}\r\n        </Message>\r\n    )\r\n}","import { ErrorMessage, Form, Formik } from 'formik';\r\nimport { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Button, Header } from 'semantic-ui-react';\r\nimport MyTextInput from '../../app/common/form/MyTextInput';\r\nimport { useStore } from '../../app/stores/store';\r\nimport * as Yup from 'yup';\r\nimport ValidationErrors from '../errors/ValidationErrors';\r\n\r\nexport default observer(function RegisterForm() {\r\n    const {userStore} = useStore();\r\n    return (\r\n        <Formik\r\n            initialValues={{displayName: '', username: '', email: '', password: '', error: null}}\r\n            onSubmit={(values, {setErrors}) => userStore.register(values).catch(error => \r\n                setErrors({error}))}\r\n            validationSchema={Yup.object({\r\n                displayName: Yup.string().required(),\r\n                username: Yup.string().required(),\r\n                email: Yup.string().required().email(),\r\n                password: Yup.string().required(),\r\n            })}\r\n        >\r\n            {({handleSubmit, isSubmitting, errors, isValid, dirty}) => (\r\n                <Form className='ui form error' onSubmit={handleSubmit} autoComplete='off'>\r\n                    <Header as='h2' content='Sign up to Reactivites' color='teal' textAlign='center' />\r\n                    <MyTextInput name='displayName' placeholder='Display Name' />\r\n                    <MyTextInput name='username' placeholder='Username' />\r\n                    <MyTextInput name='email' placeholder='Email' />\r\n                    <MyTextInput name='password' placeholder='Password' type='password' />\r\n                    <ErrorMessage \r\n                        name='error' render={() => \r\n                        <ValidationErrors errors={errors.error}/>}\r\n                    />\r\n                    <Button disabled={!isValid || !dirty || isSubmitting} \r\n                        loading={isSubmitting} positive content='Register' type='submit' fluid />\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Container, Header, Segment, Image, Button, Divider } from 'semantic-ui-react';\r\nimport { useStore } from '../../app/stores/store';\r\nimport LoginForm from '../users/LoginForm';\r\nimport RegisterForm from '../users/RegisterForm';\r\n\r\nexport default observer (function HomePage() {\r\n    const{userStore, modalStore} = useStore();\r\n\r\n    return (\r\n        <Segment inverted textAlign='center' vertical className='masthead'>\r\n            <Container text>\r\n                <Header as='h1' inverted>\r\n                    <Image size='massive' src='/assets/logo.png' alt='logo' style={{marginBottom: 12}} />\r\n                    Reactivities\r\n                </Header>\r\n                {userStore.isLoggedIn ? (\r\n                    <>\r\n                     <Header as='h2' inverted content='Welcome to Reactivities' />\r\n                     <Button as={Link} to='/activities' size='huge' inverted>\r\n                          Go to Activities\r\n                    </Button>\r\n                    </>\r\n\r\n                ): (\r\n                    <>\r\n                        <Button onClick={()=> modalStore.openModal(<LoginForm />)} size='huge' inverted>\r\n                            Login\r\n                        </Button>\r\n\r\n                        <Button onClick={()=> modalStore.openModal(<RegisterForm />)} size='huge' inverted>\r\n                            Register\r\n                        </Button>\r\n                        <Divider horizontal inverted>Or</Divider>\r\n                        <Button \r\n                            size='huge'\r\n                            color='facebook'\r\n                            content='Login with Facebook'\r\n                            onClick={userStore.facebookLogin}\r\n                            loading={userStore.fbLoading}\r\n                        \r\n                        />\r\n                    </>\r\n                )}\r\n             \r\n            </Container>\r\n        </Segment>\r\n    )\r\n})","import React from 'react';\r\nimport {Dimmer, Loader} from 'semantic-ui-react'\r\n\r\ninterface Props {\r\n    inverted?: boolean;\r\n    content?: string;\r\n}\r\n\r\nexport default function LoadingComponent({inverted=true , content= 'Loading ...'}: Props){\r\n\r\n\r\n    return (\r\n        <Dimmer active={true} inverted={inverted} >\r\n            <Loader content= {content}/>\r\n        </Dimmer>\r\n    )\r\n\r\n}","import React from 'react';\r\nimport {useField} from 'formik';\r\nimport {Form, Label} from 'semantic-ui-react';\r\n\r\ninterface Props {\r\n    placeholder: string;\r\n    name: string;\r\n    rows: number;\r\n    label?: string;\r\n\r\n}\r\n\r\nexport default function MyTextArea(props: Props){\r\n    const[field, meta]= useField(props.name);\r\n\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error}> {/* !!meta.error => '!! meens make meta.error  introbolean '*/}\r\n            <label>{props.label}</label>\r\n            <textarea {...field} {...props}/>\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color='red'>{meta.error}</Label>\r\n            ): null}\r\n        </Form.Field>\r\n    )\r\n}","import React from 'react';\r\nimport {useField} from 'formik';\r\nimport {Form, Label, Select} from 'semantic-ui-react';\r\n\r\ninterface Props {\r\n    placeholder: string;\r\n    name: string;\r\n    options:any;\r\n    label?: string;\r\n\r\n}\r\n\r\nexport default function MySelectInput(props: Props){\r\n    const[field, meta, helpers]= useField(props.name);\r\n\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error}> {/* !!meta.error => '!! meens make meta.error  introbolean '*/}\r\n            <label>{props.label}</label>\r\n           <Select \r\n                clearable\r\n                options={props.options}\r\n                value={field.value || null}\r\n                onChange={(e, d)=> helpers.setValue(d.value)}\r\n                onBlur={()=> helpers.setTouched}\r\n                placeholder={props.placeholder}\r\n           />\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color='red'>{meta.error}</Label>\r\n            ): null}\r\n        </Form.Field>\r\n    )\r\n}","export const categoryOptions = [\r\n    {text: 'Drinks', value: 'drinks'},\r\n    {text: 'Culture', value: 'culture'},\r\n    {text: 'Film', value: 'film'},\r\n    {text: 'Food', value: 'food'},\r\n    {text: 'Music', value: 'music'},\r\n    {text: 'Travel', value: 'travel'}\r\n]","import { useField } from 'formik';\r\nimport React from 'react';\r\nimport { Form, Label } from 'semantic-ui-react';\r\nimport DatePicker, {ReactDatePickerProps} from 'react-datepicker';\r\n\r\nexport default function MyDateInput(props: Partial<ReactDatePickerProps>) {\r\n    const [field, meta, helpers] = useField(props.name!); \r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <DatePicker \r\n                {...field}\r\n                {...props}\r\n                selected={(field.value && new Date(field.value)) || null}\r\n                onChange={value => helpers.setValue(value)}\r\n            />\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color='red'>{meta.error}</Label>\r\n            ) : null}\r\n        </Form.Field>\r\n    )\r\n}","import { observer } from 'mobx-react-lite';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { Link, useHistory, useParams } from 'react-router-dom';\r\nimport { Button, Header, Segment } from 'semantic-ui-react';\r\nimport LoadingComponent from '../../../app/layout/LoadingComponent';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport { v4 as uuid } from 'uuid';\r\nimport { Formik, Form } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport MyTextInput from '../../../app/common/form/MyTextInput';\r\nimport MyTextArea from '../../../app/common/form/MyTextArea';\r\nimport MySelectInput from '../../../app/common/form/MySelectInput';\r\nimport { categoryOptions } from '../../../app/common/options/categoryOptions';\r\nimport MyDateInput from '../../../app/common/form/MyDateInput';\r\nimport { ActivityFormValues } from '../../../app/models/activity';\r\n\r\nexport default observer(function ActivityForm() {\r\n    const history = useHistory();\r\n    const { activityStore, commonStore } = useStore();\r\n    const { createActivity, updateActivity, loadActivity, loadingInitial } = activityStore;\r\n    const { id } = useParams<{ id: string }>();\r\n\r\n    const [activity, setActivity] = useState<ActivityFormValues>(new ActivityFormValues());\r\n\r\n    const validationSchema = Yup.object({\r\n        title: Yup.string().required('The activity title is required'),\r\n        description: Yup.string().required('The activity description is required'),\r\n        category: Yup.string().required(),\r\n        date: Yup.string().required('Date is required').nullable(),\r\n        venue: Yup.string().required(),\r\n        city: Yup.string().required(),\r\n    })\r\n\r\n    useEffect(() => {\r\n        if (id) loadActivity(id).then(activity => setActivity(new ActivityFormValues(activity)))\r\n    }, [id, loadActivity]);\r\n\r\n    function handleFormSubmit(activity: ActivityFormValues) {\r\n        if (!activity.id) {\r\n            let newActivity = {\r\n                ...activity,\r\n                id: uuid()\r\n            };\r\n            createActivity(newActivity).then(() => history.push(`/activities/${newActivity.id}`))\r\n        } else {\r\n            updateActivity(activity).then(() => history.push(`/activities/${activity.id}`))\r\n        }\r\n    }\r\n\r\n    if (loadingInitial) return <LoadingComponent content='Loading activity...' />\r\n\r\n    return (\r\n        <Segment clearing className={commonStore.darkMode ? 'darkeMode ' : \"\" }>\r\n            <Header content='Activity Details' sub color='teal' />\r\n            <Formik \r\n                validationSchema={validationSchema}\r\n                enableReinitialize \r\n                initialValues={activity} \r\n                onSubmit={values => handleFormSubmit(values)}>\r\n                {({ handleSubmit, isValid, isSubmitting, dirty }) => (\r\n                    <Form className='ui form' onSubmit={handleSubmit} autoComplete='off'>\r\n                        <MyTextInput name='title' placeholder='Title' />\r\n                        <MyTextArea rows={3} placeholder='Description' name='description' />\r\n                        <MySelectInput options={categoryOptions} placeholder='Category'  name='category' />\r\n                        <MyDateInput \r\n                            placeholderText='Date'  \r\n                            name='date' \r\n                            showTimeSelect\r\n                            timeCaption='time'\r\n                            dateFormat='MMMM d, yyyy h:mm aa'\r\n                        />\r\n                        <Header content='Location Details' sub color='teal' />\r\n                        <MyTextInput placeholder='City'  name='city' />\r\n                        <MyTextInput placeholder='Venue' name='venue' />\r\n                        <Button \r\n                            disabled={isSubmitting || !dirty || !isValid}\r\n                            loading={isSubmitting} floated='right' \r\n                            positive type='submit' content='Submit' />\r\n                        <Button as={Link} to='/activities' floated='right' type='button' content='Cancel' />\r\n                    </Form>\r\n                )}\r\n            </Formik>\r\n\r\n        </Segment>\r\n    )\r\n})","import { Formik, Form, Field, FieldProps } from 'formik'\r\nimport { observer } from 'mobx-react-lite'\r\nimport React, { useEffect } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { Segment, Header, Comment, Loader } from 'semantic-ui-react'\r\nimport { useStore } from '../../../app/stores/store';\r\nimport * as Yup from 'yup';\r\nimport { formatDistanceToNow } from 'date-fns'\r\n\r\ninterface Props {\r\n    activityId: string;\r\n}\r\n\r\nexport default observer(function ActivityDetailedChat({ activityId }: Props) {\r\n    const { commentStore } = useStore();\r\n\r\n    useEffect(() => {\r\n        if (activityId) {\r\n          \r\n            commentStore.createHubConnection(activityId);\r\n        }\r\n        return () => {\r\n            commentStore.clearComments();\r\n        }\r\n    }, [commentStore, activityId]);\r\n\r\n    return (\r\n        <>\r\n            <Segment\r\n                textAlign='center'\r\n                attached='top'\r\n                inverted\r\n                color='teal'\r\n                style={{ border: 'none' }}\r\n            >\r\n                <Header>Chat about this event</Header>\r\n            </Segment>\r\n            <Segment attached clearing>\r\n                <Formik\r\n                    onSubmit={(values, { resetForm }) =>\r\n                        commentStore.addComment(values).then(() => resetForm())}\r\n                    initialValues={{ body: '' }}\r\n                    validationSchema={Yup.object({\r\n                        body: Yup.string().required()\r\n                    })}\r\n                >\r\n                    {({ isSubmitting, isValid, handleSubmit }) => (\r\n                        <Form className='ui form'>\r\n                            <Field name='body'>\r\n                                {(props: FieldProps) => (\r\n                                    <div style={{ position: 'relative' }}>\r\n                                        <Loader active={isSubmitting} />\r\n                                        <textarea\r\n                                            placeholder='Enter your comment (Enter to submit, SHIFT + enter for new line)'\r\n                                            rows={2}\r\n                                            {...props.field}\r\n                                            onKeyPress={e => {\r\n                                                if (e.key === 'Enter' && e.shiftKey) {\r\n                                                    return;\r\n                                                }\r\n                                                if (e.key === 'Enter' && !e.shiftKey) {\r\n                                                    e.preventDefault();\r\n                                                    isValid && handleSubmit();\r\n                                                }\r\n                                            }}\r\n                                        />\r\n                                    </div>\r\n                                )}\r\n                            </Field>\r\n                        </Form>\r\n                    )}\r\n                </Formik>\r\n                <Comment.Group>\r\n                    {commentStore.comments.map(comment => (\r\n                        <Comment key={comment.id}>\r\n                            <Comment.Avatar src={comment.image || '/assets/user.png'} />\r\n                            <Comment.Content>\r\n                                <Comment.Author as={Link} to={`/profiles/${comment.username}`}>\r\n                                    {comment.displayName}\r\n                                </Comment.Author>\r\n                                <Comment.Metadata>\r\n                                <div>{formatDistanceToNow(comment.createAt)} ago</div>\r\n                                </Comment.Metadata>\r\n                                <Comment.Text style={{ whiteSpace: 'pre-wrap' }}>{comment.body}</Comment.Text>\r\n                            </Comment.Content>\r\n                        </Comment>\r\n                    ))}\r\n                </Comment.Group>\r\n            </Segment>\r\n        </>\r\n\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react'\r\nimport { Link } from 'react-router-dom';\r\nimport {Button, Header, Item, Segment, Image, Label} from 'semantic-ui-react'\r\nimport {Activity} from \"../../../app/models/activity\";\r\nimport {format} from 'date-fns'\r\nimport { useStore } from '../../../app/stores/store';\r\nconst activityImageStyle = {\r\n    filter: 'brightness(30%)'\r\n};\r\n\r\nconst activityImageTextStyle = {\r\n    position: 'absolute',\r\n    bottom: '5%',\r\n    left: '5%',\r\n    width: '100%',\r\n    height: 'auto',\r\n    color: 'white'\r\n};\r\n\r\ninterface Props {\r\n    activity: Activity\r\n}\r\n\r\nexport default observer (function ActivityDetailedHeader({activity}: Props) {\r\n    const {activityStore : {updateAttendance, loading, cancelctivityToggle}}= useStore();\r\n    return (\r\n        <Segment.Group>\r\n            <Segment basic attached='top' style={{padding: '0'}}>\r\n                {activity.isCancelled && \r\n                    <Label style={{position: 'absolut', zIndex: 100, left: -14, top:20}} \r\n                        ribbon color='red' content='Cancelled'\r\n                    \r\n                    />\r\n                }\r\n                <Image src={`/assets/categoryImages/${activity.category}.jpg`} fluid style={activityImageStyle}/>\r\n                <Segment style={activityImageTextStyle} basic>\r\n                    <Item.Group>\r\n                        <Item>\r\n                            <Item.Content>\r\n                                <Header\r\n                                    size='huge'\r\n                                    content={activity.title}\r\n                                    style={{color: 'white'}}\r\n                                />\r\n                                <p>{format( activity.date!, 'dd MMM yyyy')}</p>\r\n                                <p>\r\n                                    Hosted by <strong><Link to={`/profiles/${activity.host?.username}`}>{activity.host?.displayName}</Link></strong>\r\n                                </p>\r\n                            </Item.Content>\r\n                        </Item>\r\n                    </Item.Group>\r\n                </Segment>\r\n            </Segment>\r\n            <Segment clearing attached='bottom'>\r\n                {activity.isHost ? (\r\n                    <>\r\n                        <Button \r\n                            colro={activity.isCancelled ? 'green' : 'red'}\r\n                            float='left'\r\n                            basic\r\n                            content={activity.isCancelled ? ' Re-activate Activity': 'Cancel Activity'}\r\n                            onClick={cancelctivityToggle}\r\n                            loading={loading}\r\n                        />\r\n                        <Button\r\n                            disabled={activity.isCancelled}\r\n                            as={Link} \r\n                            to={`/manage/${activity.id}`} \r\n                            color='orange' \r\n                            floated='right'\r\n                        >\r\n                            Manage Event\r\n                        </Button>\r\n\r\n\r\n                    </>\r\n                  \r\n                ) : activity.isGoing ? (\r\n                    <Button loading={loading} onClick={updateAttendance}>Cancel attendance</Button>\r\n                ):  (\r\n                    <Button\r\n                        disabled={activity.isCancelled}\r\n                        loading={loading} \r\n                        onClick={updateAttendance}\r\n                        color='teal'>\r\n                              Join Activity\r\n                     </Button>\r\n                ) }\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n})\r\n","import { observer } from 'mobx-react-lite';\r\nimport React from 'react'\r\nimport {Segment, Grid, Icon} from 'semantic-ui-react'\r\nimport {Activity} from \"../../../app/models/activity\";\r\nimport {format} from 'date-fns'\r\ninterface Props {\r\n    activity: Activity\r\n}\r\n\r\nexport default observer(function ActivityDetailedInfo({activity}: Props) {\r\n    return (\r\n        <Segment.Group>\r\n            <Segment attached='top'>\r\n                <Grid>\r\n                    <Grid.Column width={1}>\r\n                        <Icon size='large' color='teal' name='info'/>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={15}>\r\n                        <p>{activity.description}</p>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n            <Segment attached>\r\n                <Grid verticalAlign='middle'>\r\n                    <Grid.Column width={1}>\r\n                        <Icon name='calendar' size='large' color='teal'/>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={15}>\r\n            <span>\r\n             {format( activity.date!, 'dd MMM yyyy h:mm aa ')}\r\n            </span>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n            <Segment attached>\r\n                <Grid verticalAlign='middle'>\r\n                    <Grid.Column width={1}>\r\n                        <Icon name='marker' size='large' color='teal'/>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={11}>\r\n                        <span>{activity.venue}, {activity.city}</span>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n})","import React from 'react'\r\nimport { Segment, List, Label, Item, Image } from 'semantic-ui-react'\r\nimport { Link } from 'react-router-dom'\r\nimport { observer } from 'mobx-react-lite'\r\nimport { Activity } from '../../../app/models/activity'\r\n\r\ninterface Props {\r\n    activity: Activity;\r\n}\r\n\r\nexport default observer(function ActivityDetailedSidebar ({activity: {attendees, host}}: Props) {\r\n    if(!attendees) return null;\r\n\r\n    return (\r\n        <>\r\n            <Segment\r\n                textAlign='center'\r\n                style={{ border: 'none' }}\r\n                attached='top'\r\n                secondary\r\n                inverted\r\n                color='teal'\r\n            >\r\n              {attendees.length} {attendees.length===1 ? 'Person' :' People'} going\r\n            </Segment>\r\n            <Segment attached>\r\n                <List relaxed divided>\r\n                    {attendees.map (attendee => (\r\n                         <Item style={{ position: 'relative' }} key={attendee.username}>\r\n                             {attendee.username == host?.username && \r\n                                <Label\r\n                                style={{ position: 'absolute' }}\r\n                                color='orange'\r\n                                ribbon='right'\r\n                            >\r\n                                Host\r\n                            </Label>\r\n                             } \r\n                      \r\n                         <Image size='tiny' src={attendee.image || '/assets/user.png'} />\r\n                         <Item.Content verticalAlign='middle'>\r\n                             <Item.Header as='h3'>\r\n                                 <Link to={`/profiles/${attendee.username}` }>{attendee.displayName}</Link>\r\n                             </Item.Header>\r\n                             {attendee.following && \r\n                             <Item.Extra style={{ color: 'orange' }}>Following</Item.Extra>}\r\n                         </Item.Content>\r\n                     </Item>\r\n                    ))}\r\n                </List>\r\n            </Segment>\r\n        </>\r\n\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React, { useEffect } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport { Grid } from 'semantic-ui-react'\r\nimport LoadingComponent from '../../../app/layout/LoadingComponent';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport ActivityDetailedChat from './ActivityDetailedChat';\r\nimport ActivityDetailedHeader from './ActivityDetailedHeader';\r\nimport ActivityDetailedInfo from './ActivityDetailedInfo';\r\nimport ActivityDetailedSidebar from './ActivityDetailedSidbar';\r\n\r\n\r\n\r\n\r\n\r\nexport default observer( function ActivitDetails() {\r\n\r\nconst {activityStore} = useStore();\r\nconst {selectedActivity: activity, loadActivity, loadingInitial, clearSelectActivity}= activityStore;\r\n\r\n  const {id} = useParams<{id: string}>();\r\n  useEffect(()=> {\r\n      if(id){\r\n            loadActivity(id);\r\n      }\r\n      return ()=> clearSelectActivity();\r\n  }, [id, loadActivity, clearSelectActivity]);\r\n\r\nif(loadingInitial || !activity) return <LoadingComponent />;\r\n\r\n    return (\r\n        <Grid  container stackable>\r\n            <Grid.Row columns={2}>\r\n                 <Grid.Column computer={5} mobile={16}>\r\n                     <ActivityDetailedSidebar activity={activity!} />\r\n                </Grid.Column>\r\n                <Grid.Column computer={10} mobile={16}>\r\n                <ActivityDetailedHeader  activity={activity}/>\r\n                    <ActivityDetailedInfo activity={activity} />\r\n                    <ActivityDetailedChat activityId={activity.id} />\r\n                    \r\n                </Grid.Column>\r\n            </Grid.Row>\r\n        </Grid>\r\n    );\r\n\r\n\r\n})","import React, { useState } from 'react';\r\nimport {Button, Header, Segment} from \"semantic-ui-react\";\r\nimport axios from 'axios';\r\nimport ValidationErrors from './ValidationErrors'\r\n\r\n\r\nexport default function TestErrors() {\r\n    const baseUrl =process.env.REACT_APP_API_URL;\r\n    const [errors, setErrors] = useState(null);\r\n\r\n\r\n    function handleNotFound() {\r\n        axios.get(baseUrl + 'buggy/not-found').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleBadRequest() {\r\n        axios.get(baseUrl + 'buggy/bad-request').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleServerError() {\r\n        axios.get(baseUrl + 'buggy/server-error').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleUnauthorised() {\r\n        axios.get(baseUrl + 'buggy/unauthorised').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleBadGuid() {\r\n        axios.get(baseUrl + 'activities/notaguid').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleValidationError() {\r\n        axios.post(baseUrl + 'activities', {}).catch(err => setErrors(err));\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Header as='h1' content='Test Error component' />\r\n            <Segment>\r\n                <Button.Group widths='7'>\r\n                    <Button onClick={handleNotFound} content='Not Found' basic primary />\r\n                    <Button onClick={handleBadRequest} content='Bad Request' basic primary />\r\n                    <Button onClick={handleValidationError} content='Validation Error' basic primary />\r\n                    <Button onClick={handleServerError} content='Server Error' basic primary />\r\n                    <Button onClick={handleUnauthorised} content='Unauthorised' basic primary />\r\n                    <Button onClick={handleBadGuid} content='Bad Guid' basic primary />\r\n                </Button.Group>\r\n            </Segment>\r\n           {errors &&\r\n                <ValidationErrors errors={errors} />\r\n            }\r\n        </>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport {Button, Header, Icon, Segment} from 'semantic-ui-react';\r\nimport {Link} from 'react-router-dom'\r\n\r\nexport default function  NotFound(){\r\n    return (\r\n        <Segment placeholder>\r\n            <Header icon>\r\n                <Icon name='search'/>\r\n                Oops- we've looked everwhere and could not find this.\r\n            </Header>\r\n            <Segment.Inline>\r\n                <Button  as= {Link} to='/activitiez' primary>\r\n                    Return to activities page\r\n                </Button>\r\n            </Segment.Inline>\r\n        </Segment>\r\n    )\r\n}\r\n","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Container, Header, Segment } from 'semantic-ui-react';\r\nimport { useStore } from '../../app/stores/store';\r\n\r\nexport default observer(function ServerError() {\r\n    const {commonStore} = useStore();\r\n\r\n    return (\r\n        <Container>\r\n\r\n        <Header as='h1' content='server error' />\r\n        <Header  sub as ='h5' color='red' content={commonStore.error?.message} />\r\n            {commonStore.error?.details &&\r\n                <Segment>\r\n                    <Header as='h4' content='Stack trace' color='teal' />\r\n                    <code style={{margin: '10px'}}> {commonStore.error.details}</code>\r\n\r\n                </Segment>\r\n            \r\n            \r\n            }\r\n\r\n\r\n        </Container>\r\n  )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Modal } from 'semantic-ui-react';\r\nimport { useStore } from '../../stores/store';\r\n\r\nexport default observer(function ModalContainer() {\r\n    const {modalStore} = useStore();\r\n\r\n    return (\r\n        <Modal open={modalStore.modal.open} onClose={modalStore.closeModal} size='mini'>\r\n            <Modal.Content>\r\n                {modalStore.modal.body}\r\n            </Modal.Content>\r\n        </Modal>\r\n    )\r\n})","import React from 'react';\r\nimport { Cropper } from 'react-cropper';\r\nimport 'cropperjs/dist/cropper.css';\r\n\r\ninterface Props {\r\n    imagePreview: string;\r\n    setCropper: (cropper: Cropper) => void;\r\n}\r\n\r\nexport default function PhotoWidgetCropper({imagePreview, setCropper}: Props) {\r\n    return (\r\n        <Cropper \r\n            src={imagePreview}\r\n            style={{height: 200, width: '100%'}}\r\n            initialAspectRatio={1}\r\n            aspectRatio={1}\r\n            preview='.img-preview'\r\n            guides={false}\r\n            viewMode={1}\r\n            autoCropArea={1}\r\n            background={false}\r\n            onInitialized={cropper => setCropper(cropper)}\r\n        />\r\n    )\r\n}","import React, {useCallback} from 'react'\r\nimport {useDropzone} from 'react-dropzone'\r\nimport { Header, Icon } from 'semantic-ui-react';\r\n\r\ninterface Props {\r\n    setFiles: (file: any) => void;\r\n}\r\n\r\n\r\nexport default function PhotoWidgetDropzone({setFiles}: Props) {\r\n    const dzStyles= {\r\n        border: 'dased 3px #eee',\r\n        borderColor: '#eee',\r\n        borderRadiws: '5px',\r\n        paddingTop:'30px',\r\n        textAlign: 'center' as 'center',\r\n        height: 200\r\n    };\r\n\r\n    const dzActive = {\r\n        borderColor: 'green'\r\n    }\r\n\r\n  const onDrop = useCallback(acceptedFiles => {\r\n        setFiles(acceptedFiles.map((file: any)=> Object.assign(file, {\r\n            preview: URL.createObjectURL(file)\r\n        })))\r\n  }, [setFiles])\r\n  const {getRootProps, getInputProps, isDragActive} = useDropzone({onDrop})\r\n\r\n  return (\r\n    <div {...getRootProps()} style={isDragActive ? {...dzStyles, ...dzActive}: dzStyles} >\r\n      <input {...getInputProps()} />\r\n        <Icon name='upload' size='huge'/>\r\n        <Header content='drop image here'/>\r\n    </div>\r\n  )\r\n}","import React, { useEffect, useState } from 'react';\r\nimport { Button, Grid, Header } from 'semantic-ui-react';\r\nimport PhotoWidgetCropper from './PhotoWidgetCropper';\r\nimport PhotoWidgetDropzone from './PhotoWidgetDropzone';\r\n\r\ninterface Props {\r\n    loading: boolean;\r\n    uploadPhoto: (file: Blob) => void;\r\n}\r\n\r\nexport default function PhotoUploadWidget({loading, uploadPhoto}: Props) {\r\n    const [files, setFiles] = useState<any>([]);\r\n    const [cropper, setCropper] = useState<Cropper>();\r\n\r\n    function onCrop() {\r\n        if (cropper) {\r\n            cropper.getCroppedCanvas().toBlob(blob => uploadPhoto(blob!));\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        return () => {\r\n            files.forEach((file: any) => URL.revokeObjectURL(file.preview))\r\n        }\r\n    }, [files])\r\n\r\n    return (\r\n        <Grid stackable>\r\n            <Grid.Column width={4}>\r\n                <Header sub color='teal' content='Step 1 - Add Photo' />\r\n                <PhotoWidgetDropzone setFiles={setFiles} />\r\n            </Grid.Column>\r\n            <Grid.Column width={1} />\r\n            <Grid.Column width={4}>\r\n                <Header sub color='teal' content='Step 2 - Resize image' />\r\n                {files && files.length > 0 && (\r\n                    <PhotoWidgetCropper setCropper={setCropper} imagePreview={files[0].preview} />\r\n                )}\r\n            </Grid.Column>\r\n            <Grid.Column width={1} />\r\n            <Grid.Column width={4}>\r\n                <Header sub color='teal' content='Step 3 - Preview & Upload' />\r\n                {files && files.length > 0 &&\r\n                    <>\r\n                        <div className='img-preview' style={{ minHeight: 200, overflow: 'hidden' }} />\r\n                        <Button.Group widths={2}>\r\n                            <Button loading={loading} onClick={onCrop} positive icon='check' />\r\n                            <Button disabled={loading} onClick={() => setFiles([])} icon='close' />\r\n                        </Button.Group>\r\n                    </>}\r\n\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n}","import { observer } from 'mobx-react-lite';\r\nimport React, { SyntheticEvent, useState } from 'react';\r\nimport { Button, Card, Grid, Header, Image, Tab } from 'semantic-ui-react';\r\nimport PhotoUploadWidget from '../../app/common/imageUploade/PhotoUploadWidget';\r\nimport { Photo, Profile } from '../../app/models/profile';\r\nimport { useStore } from '../../app/stores/store';\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\n\r\nexport default observer(function ProfilePhotos({ profile }: Props) {\r\n    const { profileStore: { isCurrentUser, uploadPhoto, \r\n            uploading, loading, setMainPhoto, deletePhoto } } = useStore();\r\n    const [addPhotoMode, setAddPhotoMode] = useState(false);\r\n    const [target, setTarget] = useState('');\r\n\r\n    function handlePhotoUpload(file: Blob) {\r\n        uploadPhoto(file).then(() => setAddPhotoMode(false));\r\n    }\r\n\r\n    function handleSetMainPhoto(photo: Photo, e: SyntheticEvent<HTMLButtonElement>) {\r\n        setTarget(e.currentTarget.name);\r\n        setMainPhoto(photo);\r\n    }\r\n\r\n    function handleDeletePhoto(photo: Photo, e: SyntheticEvent<HTMLButtonElement>) {\r\n        setTarget(e.currentTarget.name);\r\n        deletePhoto(photo);\r\n    }\r\n\r\n    console.log(profile.photos)\r\n\r\n    return (\r\n        <Tab.Pane>\r\n            <Grid>\r\n                <Grid.Column width={16}>\r\n                    <Header floated='left' icon='image' content='Photos' />\r\n                    {isCurrentUser && (\r\n                        <Button floated='right' basic\r\n                            content={addPhotoMode ? 'Cancel' : 'Add Photo'}\r\n                            onClick={() => setAddPhotoMode(!addPhotoMode)}\r\n                        />\r\n                    )}\r\n                </Grid.Column>\r\n                <Grid.Column width={16}>\r\n                    {addPhotoMode ? (\r\n                        <PhotoUploadWidget uploadPhoto={handlePhotoUpload} loading={uploading} />\r\n                    ) : (\r\n                            <Card.Group >\r\n                                {profile.photos?.map(photo => (\r\n                                    <Card key={photo.id}>\r\n                                        <Image src={photo.url} size='massive' />\r\n                                        {isCurrentUser && (\r\n                                            <Button.Group   widths={2}>\r\n                                                <Button \r\n                                                    basic\r\n                                                    color='green'\r\n                                                    content='Main'\r\n                                                    name={'main' + photo.id}\r\n                                                    disabled={photo.isMain}\r\n                                                    loading={target === 'main' + photo.id && loading}\r\n                                                    onClick={e => handleSetMainPhoto(photo, e)}\r\n                                                />\r\n                                                <Button \r\n                                                    basic \r\n                                                    color='red' \r\n                                                    icon='trash' \r\n                                                    loading={target === photo.id && loading}\r\n                                                    onClick={e => handleDeletePhoto(photo, e)}\r\n                                                    disabled={photo.isMain}\r\n                                                    name={photo.id}\r\n                                                />\r\n                                            </Button.Group>\r\n                                        )}\r\n                                    </Card>\r\n                                ))}\r\n                            </Card.Group>\r\n                        )}\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    )\r\n})","import React from 'react';\r\nimport {Tab, Grid, Header, Card} from \"semantic-ui-react\";\r\nimport ProfileCard from \"./ProfileCard\";\r\nimport {useStore} from \"../../app/stores/store\";\r\nimport { observer } from 'mobx-react-lite';\r\n\r\nexport default observer(function ProfileFollowings() {\r\n    const {profileStore} = useStore();\r\n    const {profile, followings, loadingFollowings, activeTab} = profileStore;\r\n\r\n\r\n    return (\r\n        <Tab.Pane loading={loadingFollowings}>\r\n            <Grid stackable>\r\n                <Grid.Column computer={16} mobile={10}>\r\n                    <Header\r\n                        floated='left'\r\n                        icon='user'\r\n                        content={activeTab===3 ? `People following ${profile!.displayName}` : `People ${profile?.displayName} follower` }\r\n                    />\r\n                </Grid.Column>\r\n                <Grid.Column computer={16} mobile={10}>\r\n                    <Card.Group >\r\n                        {followings.map(profile => (\r\n                            <ProfileCard key={profile.username} profile={profile} />\r\n                        ))}\r\n                    </Card.Group>\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    )\r\n})","import React, { SyntheticEvent, useEffect } from 'react';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { Tab, Grid, Header, Card, Image, TabProps } from 'semantic-ui-react';\r\nimport { Link } from 'react-router-dom';\r\nimport { UserActivity } from '../../app/models/profile';\r\nimport { format } from 'date-fns';\r\nimport { useStore } from \"../../app/stores/store\";\r\n\r\n\r\nconst panes = [\r\n    { menuItem: 'Future Events', pane: { key: 'future' } },\r\n    { menuItem: 'Past Events', pane: { key: 'past' } },\r\n    { menuItem: 'Hosting', pane: { key: 'hosting' } }\r\n];\r\n\r\nexport default observer(function ProfileActivities() {\r\n    const { profileStore } = useStore();\r\n    const {\r\n        loadUserActivities,\r\n        profile,\r\n        loadingActivities,\r\n        userActivities\r\n    } = profileStore;\r\n    useEffect(() => {\r\n        loadUserActivities(profile!.username);\r\n    }, [loadUserActivities, profile]);\r\n    const handleTabChange = (e: SyntheticEvent, data: TabProps) => {\r\n        loadUserActivities(profile!.username, panes[data.activeIndex as\r\n            number].pane.key);\r\n    };\r\n    return (\r\n        <Tab.Pane loading={loadingActivities}>\r\n            <Grid>\r\n                <Grid.Column width={16}>\r\n                    <Header floated='left' icon='calendar'\r\n                        content={'Activities'} />\r\n                </Grid.Column>\r\n                <Grid.Column width={16}>\r\n                    <Tab\r\n                        panes={panes}\r\n                        menu={{ secondary: true, pointing: true }}\r\n                        onTabChange={(e, data) => handleTabChange(e, data)}\r\n                    />\r\n                    <br />\r\n                    <Card.Group >\r\n                        {userActivities.map((activity: UserActivity) => (\r\n                            <Card\r\n                                as={Link}\r\n                                to={`/activities/${activity.id}`}\r\n                                key={activity.id}\r\n                            >\r\n                                <Image\r\n                                    src={`/assets/categoryImages/${activity.category}.jpg`}\r\n                                    style={{\r\n                                        minHeight: 100, objectFit:\r\n                                            'cover'\r\n                                    }}\r\n                                />\r\n                                <Card.Content>\r\n                                    <Card.Header\r\n                                        textAlign='center'>{activity.title}</Card.Header>\r\n                                    <Card.Meta textAlign='center'>\r\n                                        <div>{format(new Date(activity.date),'do LLL')}</div>\r\n                                        <div>{format(new Date(activity.date), 'h:mm a')}</div>\r\n                                    </Card.Meta>\r\n                                </Card.Content>\r\n                            </Card>\r\n                        ))}\r\n                    </Card.Group>\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    );\r\n\r\n});","import { Form, Formik } from \"formik\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { Button } from \"semantic-ui-react\";\r\nimport MyTextArea from \"../../app/common/form/MyTextArea\";\r\nimport MyTextInput from \"../../app/common/form/MyTextInput\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport * as Yup from 'yup';\r\ninterface Props {\r\n    setEditMode: (editMode: boolean) => void;\r\n}\r\nexport default observer(function ProfileEditForm({ setEditMode }: Props) {\r\n    const { profileStore: { profile, updateProfile } } = useStore();\r\n    return (\r\n        <Formik\r\n            initialValues={{\r\n                displayName: profile?.displayName, bio:\r\n                    profile?.bio\r\n            }}\r\n            onSubmit={values => {\r\n                updateProfile(values).then(() => {\r\n                    setEditMode(false);\r\n                })\r\n            }}\r\n            validationSchema={Yup.object({\r\n                displayName: Yup.string().required()\r\n            })}\r\n        >\r\n            {({ isSubmitting, isValid, dirty }) => (\r\n                <Form className='ui form'>\r\n                    <MyTextInput placeholder='Display Name'\r\n                        name='displayName' />\r\n                    <MyTextArea rows={3} placeholder='Add your bio'\r\n                        name='bio' />\r\n                    <Button\r\n                        positive\r\n                        type='submit'\r\n                        loading={isSubmitting}\r\n                        content='Update profile'\r\n                        floated='right'\r\n                        disabled={!isValid || !dirty}\r\n                    />\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    )\r\n})","import React, { useState } from 'react';\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport { Button, Grid, Header, Tab } from \"semantic-ui-react\";\r\nimport ProfileEditForm from \"./ProfileEditForm\";\r\nimport { observer } from 'mobx-react-lite';\r\nexport default observer(function ProfileAbout() {\r\n    const { profileStore } = useStore();\r\n    const { isCurrentUser, profile } = profileStore;\r\n    const [editMode, setEditMode] = useState(false);\r\n    return (\r\n        <Tab.Pane>\r\n            <Grid>\r\n                <Grid.Column width='16'>\r\n                    <Header floated='left' icon='user' content={`About ${profile?.displayName}`} />\r\n                    {isCurrentUser && (\r\n                        <Button\r\n                            floated='right'\r\n                            basic\r\n                            content={editMode ? 'Cancel' : 'Edit Profile'}\r\n                            onClick={() => setEditMode(!editMode)}\r\n                        />\r\n                    )}\r\n                </Grid.Column>\r\n                <Grid.Column width='16'>\r\n                    {editMode ? <ProfileEditForm setEditMode={setEditMode} /> :\r\n                        <span style={{ whiteSpace: 'pre-wrap' }}>{profile?.bio}</span>}\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport {  Tab } from 'semantic-ui-react';\r\nimport { Profile } from '../../app/models/profile';\r\nimport ProfilePhotos from './ProfilePhotos';\r\nimport ProfileFollowings from './ProfileFollowings'\r\nimport { useStore } from '../../app/stores/store';\r\nimport ProfileActivities from './ProfileActivities';\r\nimport ProfileAbout from './ProfileAbout';\r\nimport style from './profile.module.css'\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\n\r\nexport default observer(function ProfileContent({profile}: Props) {\r\n\r\n    const {profileStore} = useStore();\r\n    const panes = [\r\n        {menuItem: 'About', render: () => <ProfileAbout />},\r\n        {menuItem: 'Photos', render: () => <ProfilePhotos profile={profile} />},\r\n        {menuItem: 'Events', render: () => <ProfileActivities />},\r\n        {menuItem: 'Followers', render: () => <ProfileFollowings />},\r\n        {menuItem: 'Following', render: () => <ProfileFollowings />},\r\n    ];\r\n\r\n  \r\n    return (\r\n        \r\n        \r\n            <Tab \r\n                menu={{fluid: true, pointing: true, className: style.wrapped}}\r\n               \r\n                panes={panes}\r\n                onTabChange={(e, data)=> {\r\n                    profileStore.setActiveTab(data.activeIndex)\r\n                }}\r\n                \r\n            />\r\n     \r\n       \r\n    )\r\n})\r\n","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport {Segment, Grid, Item, Header, Statistic, Divider, Reveal, Button} from 'semantic-ui-react'\r\nimport { Profile } from '../../app/models/profile';\r\nimport { useStore } from '../../app/stores/store';\r\nimport FollowButton from './FollowButton';\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\n\r\n\r\n\r\nexport default observer(function Profileheader({profile}: Props){\r\n\r\n    return (\r\n        <Segment > \r\n            <Grid>\r\n                <Grid.Column computer={4} mobile={6}>\r\n                    <Item.Group>\r\n                        <Item>\r\n                            <Item.Image avatar size='small' src={profile.image || '/assets/user.png'}/>\r\n                            <Item.Content verticalAlign='middle'>\r\n                                <Header as='h1' content={profile.displayName} />\r\n                            </Item.Content>\r\n                        </Item>\r\n                    </Item.Group>\r\n                </Grid.Column>\r\n                <Grid.Column computer={5} mobile={6} floated='right'>\r\n                    <Statistic.Group widths={2} >\r\n                        <Statistic\r\n                            \r\n                            label='Followers' value= {profile.followersCount}/>\r\n                        <Statistic label='Following' value={profile.followingCount}/>\r\n                    </Statistic.Group>\r\n                    <Divider />\r\n                   \r\n                    <FollowButton profile={profile} />\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Segment>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React, { useEffect } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport { Grid } from 'semantic-ui-react';\r\nimport LoadingComponent from '../../app/layout/LoadingComponent';\r\nimport { useStore } from '../../app/stores/store';\r\nimport ProfileContent from './ProfileContent';\r\nimport ProfileHeader from './ProfileHeader';\r\nimport '../../app/layout/styles.css';\r\n\r\nexport default observer(function ProfilePage() {\r\n    const { username } = useParams<{ username: string }>();\r\n    const { profileStore } = useStore();\r\n    const { loadingProfile, loadProfile, profile, setActiveTab } = profileStore;\r\n\r\n    useEffect(() => {\r\n        loadProfile(username);\r\n        return () => {\r\n            setActiveTab(0);\r\n        }\r\n    }, [loadProfile, username])\r\n\r\n  \r\n\r\n    if (loadingProfile) return <LoadingComponent content='Loading profile...' />\r\n\r\n    return (\r\n        <Grid stackable>\r\n                {profile &&\r\n                    <Grid.Row>\r\n                        <Grid.Column computer={16} mobile={16}>\r\n                             <ProfileHeader profile={profile} />\r\n                        </Grid.Column>\r\n                        <Grid.Column style={{marginTop:20}} computer={16} mobile={16}>\r\n                             <ProfileContent profile={profile} />\r\n                        </Grid.Column>\r\n                    </Grid.Row>}\r\n         \r\n        </Grid>\r\n    )\r\n })","import React from 'react';\r\nimport { Redirect, Route, RouteComponentProps, RouteProps } from 'react-router-dom';\r\nimport { useStore } from '../stores/store';\r\n\r\ninterface Props extends RouteProps {\r\n    component: React.ComponentType<RouteComponentProps<any>> | React.ComponentType<any>\r\n}\r\n\r\nexport default function PrivateRoute ({component : Component, ...rest}: Props){\r\n    const {userStore: {isLoggedIn}} = useStore();\r\n\r\n    return (\r\n        <Route \r\n            {...rest}\r\n            render={(props) => isLoggedIn ? <Component {...props} /> : <Redirect to='/' />}\r\n        />\r\n    )\r\n\r\n\r\n}","import React, { useEffect } from 'react';\r\nimport {  Container} from 'semantic-ui-react';\r\nimport NavBar from '../layout/NavBar'\r\nimport ActivityDashboard from '../../features/activities/dachboard/ActivityDashboard'\r\nimport { observer } from 'mobx-react-lite';\r\nimport HomePage from '../../features/home/HomePage';\r\nimport { Route, Switch, useLocation } from 'react-router-dom';\r\nimport ActivityForm from '../../features/activities/form/ActivityForm';\r\nimport ActivityDetails from '../../features/activities/details/ActivityDetails';\r\nimport TestErrors from '../../features/errors/TestError'\r\nimport {ToastContainer} from 'react-toastify'\r\nimport NotFound from '../../features/errors/NotFound'\r\nimport ServerError from '../../features/errors/ServerErrors'\r\nimport { useStore } from '../stores/store';\r\nimport LoadingComponent from './LoadingComponent';\r\nimport ModalContainer from '../common/modals/ModalContainer';\r\nimport ProfilePage from '../../features/profiles/ProfilePage';\r\nimport PrivateRoute from './PrivateRoute';\r\n\r\n\r\n\r\nfunction App() {\r\nconst location = useLocation();\r\nconst {commonStore, userStore}= useStore();\r\n\r\nuseEffect(() => {\r\n  if(commonStore.token) {\r\n    userStore.getUser().finally(()=> commonStore.setApploaded());\r\n  }else {\r\n    userStore.getFacebookLoginStatus().then(()=>{\r\n      commonStore.setApploaded();\r\n    })\r\n    commonStore.setApploaded();\r\n  }\r\n}, [commonStore, userStore])\r\n\r\n\r\nif(!commonStore.appLoaded) return <LoadingComponent content= \"Loafin app ..\" />\r\n\r\nreturn (\r\n  <>\r\n <ToastContainer position='bottom-right' hideProgressBar />\r\n  <ModalContainer />\r\n    <Route exact path='/' component={HomePage} />\r\n    <Route\r\n      path={'/(.+)'}\r\n      render={() => (\r\n        <>\r\n          <NavBar />\r\n          <Container style={{ marginTop: '7em' }}>\r\n            <Switch>\r\n              <PrivateRoute exact path='/activities' component={ActivityDashboard} />\r\n              <PrivateRoute path='/activities/:id' component={ActivityDetails} />\r\n              <PrivateRoute key={location.key} path={['/createActivity', '/manage/:id']} component={ActivityForm} />\r\n              <PrivateRoute path='/profiles/:username' component={ProfilePage} />\r\n              <PrivateRoute path=\"/errors\" component={TestErrors} />\r\n              <Route path=\"/server-error\" component={ServerError} />\r\n              <Route component={NotFound}/>  \r\n            </Switch>\r\n          </Container>\r\n        </>\r\n      )}\r\n    />\r\n  </>\r\n);\r\n}\r\n\r\nexport default observer(App);\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { useEffect } from \"react\";\r\nimport { useLocation } from \"react-router-dom\";\r\n\r\nexport default function ScrollToTop() {\r\n  const { pathname } = useLocation();\r\n\r\n  useEffect(() => {\r\n    window.scrollTo(0, 0);\r\n  }, [pathname]);\r\n\r\n  return null;\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './app/layout/App';\nimport './app/layout/styles.css'\nimport 'semantic-ui-css/semantic.min.css'\nimport 'react-calendar/dist/Calendar.css'\nimport 'react-toastify/dist/ReactToastify.min.css'\nimport 'react-datepicker/dist/react-datepicker'\nimport reportWebVitals from './reportWebVitals';\nimport {store, StoreContext} from './app/stores/store'\nimport { Router } from \"react-router-dom\";\nimport {createBrowserHistory} from 'history';\nimport ScrollToTop from './app/layout/ScrollToTop';\n\nexport const history = createBrowserHistory();\n\n\nReactDOM.render(\n  <StoreContext.Provider value={store}>\n      <Router history ={history}>\n         <ScrollToTop />\n            <App  />\n      </Router>\n  </StoreContext.Provider>\n \n  ,document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}